<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ckJava</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ckjava.com/"/>
  <updated>2019-04-25T13:25:55.172Z</updated>
  <id>http://ckjava.com/</id>
  
  <author>
    <name>ck</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java List 去重,差集,交集,并集的处理</title>
    <link href="http://ckjava.com/2019/04/25/Java-list-retainAll-addAll-removeAll/"/>
    <id>http://ckjava.com/2019/04/25/Java-list-retainAll-addAll-removeAll/</id>
    <published>2019-04-24T16:00:00.000Z</published>
    <updated>2019-04-25T13:25:55.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-List-去重"><a href="#1-List-去重" class="headerlink" title="1 List 去重"></a>1 List 去重</h2><p>list1 中的元素不会有重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list1.add(<span class="string">"1111"</span>);</span><br><span class="line">    list1.add(<span class="string">"2222"</span>);</span><br><span class="line">    list1.add(<span class="string">"2222"</span>);</span><br><span class="line">    list1.add(<span class="string">"3333"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(<span class="string">"3333"</span>);</span><br><span class="line">    list2.add(<span class="string">"4444"</span>);</span><br><span class="line">    list2.add(<span class="string">"5555"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单个List去重复</span></span><br><span class="line">    list1.addAll(list2);</span><br><span class="line">    list1 = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> HashSet&lt;&gt;(list1));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"list1:"</span>);</span><br><span class="line">    printList(list1);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"list2:"</span>);</span><br><span class="line">    printList(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1:</span><br><span class="line">1111  2222  3333  4444  5555</span><br><span class="line">list2:</span><br><span class="line">3333  4444  5555</span><br></pre></td></tr></table></figure><h2 id="2-List-差集"><a href="#2-List-差集" class="headerlink" title="2 List 差集"></a>2 List 差集</h2><ul><li>removeAll</li></ul><p>从 list1 中去掉 list1 和 list2 相同的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test3() &#123;</span><br><span class="line">    List&lt;String&gt; list1 = new ArrayList&lt;&gt;();</span><br><span class="line">    list1.add(&quot;1111&quot;);</span><br><span class="line">    list1.add(&quot;2222&quot;);</span><br><span class="line">    list1.add(&quot;3333&quot;);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(&quot;3333&quot;);</span><br><span class="line">    list2.add(&quot;4444&quot;);</span><br><span class="line">    list2.add(&quot;5555&quot;);</span><br><span class="line"></span><br><span class="line">    // 差集, 从list1中去掉 list1 和 list2 相同的元素</span><br><span class="line">    list1.removeAll(list2);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;list1:&quot;);</span><br><span class="line">    printList(list1);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;list2:&quot;);</span><br><span class="line">    printList(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1:</span><br><span class="line">1111  2222</span><br><span class="line">list2:</span><br><span class="line">3333  4444  5555</span><br></pre></td></tr></table></figure><h2 id="3-List-交集"><a href="#3-List-交集" class="headerlink" title="3 List 交集"></a>3 List 交集</h2><ul><li>retainAll</li></ul><p>list1 中只剩下 list1 和 list2 中相同的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2() &#123;</span><br><span class="line">    List&lt;String&gt; list1 = new ArrayList&lt;&gt;();</span><br><span class="line">    list1.add(&quot;1111&quot;);</span><br><span class="line">    list1.add(&quot;2222&quot;);</span><br><span class="line">    list1.add(&quot;3333&quot;);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(&quot;3333&quot;);</span><br><span class="line">    list2.add(&quot;4444&quot;);</span><br><span class="line">    list2.add(&quot;5555&quot;);</span><br><span class="line"></span><br><span class="line">    // 交集, 两个list中相同的元素</span><br><span class="line">    list1.retainAll(list2);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;list1:&quot;);</span><br><span class="line">    printList(list1);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;list2:&quot;);</span><br><span class="line">    printList(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1:</span><br><span class="line">3333</span><br><span class="line">list2:</span><br><span class="line">3333  4444  5555</span><br></pre></td></tr></table></figure><h2 id="4-List-并集"><a href="#4-List-并集" class="headerlink" title="4 List 并集"></a>4 List 并集</h2><ul><li>addAll</li></ul><p>list1 中包含原来 list1 和 list2 中的所有元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test1() &#123;</span><br><span class="line">    List&lt;String&gt; list1 = new ArrayList&lt;&gt;();</span><br><span class="line">    list1.add(&quot;1111&quot;);</span><br><span class="line">    list1.add(&quot;2222&quot;);</span><br><span class="line">    list1.add(&quot;3333&quot;);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(&quot;3333&quot;);</span><br><span class="line">    list2.add(&quot;4444&quot;);</span><br><span class="line">    list2.add(&quot;5555&quot;);</span><br><span class="line"></span><br><span class="line">    // 并集, 可能会有重复</span><br><span class="line">    list1.addAll(list2);</span><br><span class="line">    System.out.println(&quot;list1:&quot;);</span><br><span class="line">    printList(list1);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;list2:&quot;);</span><br><span class="line">    printList(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1:</span><br><span class="line">1111  2222  3333  3333  4444  5555</span><br><span class="line">list2:</span><br><span class="line">3333  4444  5555</span><br></pre></td></tr></table></figure><h2 id="5-打印方法"><a href="#5-打印方法" class="headerlink" title="5 打印方法"></a>5 打印方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void printList(List&lt;String&gt; dataList) &#123;</span><br><span class="line">    for (String str : dataList) &#123;</span><br><span class="line">        System.out.print(str.concat(&quot;  &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java List 去重,差集,交集,并集的处理
    
    </summary>
    
      <category term="技术" scheme="http://ckjava.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
      <category term="集合" scheme="http://ckjava.com/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="List" scheme="http://ckjava.com/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Java Servlet 中两种重定向 forward 和 sendRedirect 的区分</title>
    <link href="http://ckjava.com/2019/04/25/Java-Servlet-sendRedirect-forward/"/>
    <id>http://ckjava.com/2019/04/25/Java-Servlet-sendRedirect-forward/</id>
    <published>2019-04-24T16:00:00.000Z</published>
    <updated>2019-04-25T13:27:36.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/&quot;, method = RequestMethod.GET, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br><span class="line">public void index(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    //request.getRequestDispatcher(&quot;/swagger-ui.html&quot;).forward(request, response);</span><br><span class="line">    response.sendRedirect(&quot;/swagger-ui.html&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h2><p>简单来说：浏览器想请求 /a 的资源，但是服务器不告知浏览器真正的资源在 /b，直接将 /b 的内容返回给浏览器。</p><ul><li>服务器将 url 的资源直接解析后返回给浏览器</li><li>属于服务器内部跳转，浏览器地址栏的 url 不会发生变化</li><li>浏览器一共进行了一次请求</li></ul><h2 id="sendRedirect"><a href="#sendRedirect" class="headerlink" title="sendRedirect"></a>sendRedirect</h2><p>简单来说：浏览器想请求 /a 的资源，但是服务器告知真实的资源在 /b 那里，随后浏览器又去请求 /b 的资源。</p><p>关键点如下：</p><ul><li>服务器将 url 告知浏览器，浏览器随后再次请求 url，</li><li>浏览器地址栏的 url 会发生变化</li><li>服务器响应码为 302，Response Headers 的具体内容如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302</span><br><span class="line">Location: http://localhost:8011/swagger-ui.html</span><br><span class="line">Content-Length: 0</span><br><span class="line">Date: Sun, 16 Dec 2018 03:57:12 GMT</span><br></pre></td></tr></table></figure><ul><li>浏览器一共进行了两次请求</li></ul>]]></content>
    
    <summary type="html">
    
      Java Servlet 中两种重定向 forward 和 sendRedirect 的区分
    
    </summary>
    
      <category term="技术" scheme="http://ckjava.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
      <category term="Servlet" scheme="http://ckjava.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 中的 filter 组件使用总结</title>
    <link href="http://ckjava.com/2019/03/26/AngularJS-filter-practice/"/>
    <id>http://ckjava.com/2019/03/26/AngularJS-filter-practice/</id>
    <published>2019-03-25T16:00:00.000Z</published>
    <updated>2019-03-26T12:51:11.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h4 id="1-两种使用方法"><a href="#1-两种使用方法" class="headerlink" title="1. 两种使用方法"></a>1. 两种使用方法</h4><ol><li>html 中使用：<code>{{ currency_expression | currency : symbol : fractionSize}}</code><ul><li><code>|</code> 左边的 <code>currency_expression</code> 为 源，右边使用 <code>:</code> 分隔，第一个参数表示 filter 名称，后面 <code>symbol</code> 和 <code>fractionSize</code> 是参数</li></ul></li><li>JavaScript 中使用：<code>$filter(&#39;currency&#39;)(amount, symbol, fractionSize)</code><ul><li>首先方法中引入 <code>$filter</code> 依赖</li><li><code>currency</code> 表示 filter 名称， <code>amount</code> 表示 源，<code>symbol</code>, <code>fractionSize</code> 表示其他参数</li></ul></li></ol><h4 id="2-系统自带-Filter-组件介绍"><a href="#2-系统自带-Filter-组件介绍" class="headerlink" title="2. 系统自带 Filter 组件介绍"></a>2. 系统自带 Filter 组件介绍</h4><ol><li><p>filter 从数组对象中获取新的数组：<code>{{ filter_expression | filter : expression : comparator : anyPropertyKey}}</code>，使用如下</p><ul><li>friends 为静态的数组， searchText 为用户的输入，根据用户的输入过滤将返回数组中所有 like <code>%searchText%</code> 的内容，并返回新的数组<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-init</span>=<span class="string">"friends = [&#123;name:'John', phone:'555-1276'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                     &#123;name:'Mary', phone:'800-BIG-MARY'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                     &#123;name:'Mike', phone:'555-4321'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                     &#123;name:'Adam', phone:'555-5678'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                     &#123;name:'Julie', phone:'555-8765'&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                     &#123;name:'Juliette', phone:'555-5678'&#125;]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Search: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"searchTextResults"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"friend in friends | filter:searchText"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;friend.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;friend.phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>currency 格式化金额：  <code>{{ currency_expression | currency : symbol : fractionSize}}</code>，使用如下</p><ul><li>amount 为 1234.56</li><li><code>{{amount | currency:"USD$ ":2}}</code>，返回 <code>USD$ 1,234.56</code></li><li><code>{{amount | currency:"￥":2}}</code>，返回 <code>￥1,234.56</code></li><li><code>{{amount | currency:"￥":0}}</code>，返回 <code>￥1,234</code></li></ul></li><li><p>date 格式化日期 <code>{{ date_expression | date : format : timezone}}</code></p><ul><li>val 为 1288323623006 </li><li><code>{{val | date:'medium'}}</code>，返回 Oct 29, 2010 11:40:23 AM</li><li><code>{{val | date:'yyyy-MM-dd HH:mm:ss Z'}}</code>，返回 2010-10-29 11:40:23 +0800</li><li><code>{{val | date:'MM/dd/yyyy @ h:mma'}}</code>，返回 10/29/2010 @ 11:40AM</li><li><code>{{val | date:"MM/dd/yyyy 'at' h:mma"}}</code>，返回 10/29/2010 at 11:40AM</li></ul></li><li><p>number 格式化小数 <code>{{ number_expression | number : fractionSize}}</code></p><ul><li>val 为 1234.56789</li><li><code>{{val | number}}</code>，返回 1,234.568</li><li><code>{{val | number:0}}</code>，返回 1,235</li><li><code>{{val | number:0}}</code>，返回 -1,234.5679</li></ul></li><li><p>json 格式化 JSON 对象 <code>{{ json_expression | json : spacing}}</code>, spacing 表示次行的缩进的空格数，默认2个</p><ul><li>val 为 <code>{&#39;name&#39;:&#39;value&#39;}</code></li><li><p><code>{{val | json}}</code>，返回如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>{{val | json:4}}</code>，返回如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;value&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="6"><li><p>lowercase 转成小写格式 <code>{{ lowercase_expression | lowercase}}</code></p><ul><li>val 为 abc</li><li><code>{{val | lowercase}}</code>，返回 abc</li></ul></li><li><p>uppercase 转成大写格式 <code>{{ uppercase_expression | uppercase}}</code></p><ul><li>val 为 abc</li><li><code>{{val | uppercase}}</code>，返回 ABC</li></ul></li><li><p>limitTo 截取字符串或者元素 <code>{{ limitTo_expression | limitTo : limit : begin}}</code></p><ul><li>str 为 abcdefghi </li><li><code>{{str | limitTo:3}}</code>，返回 abc</li><li>numbers 为 [1,2,3,4,5,6,7,8,9]</li><li><code>{{numbers | number:3}}</code>，返回 [1,2,3]</li></ul></li><li><p>orderBy 数组排序 <code>{{ orderBy_expression | orderBy : expression : reverse : comparator}}</code></p><ul><li>expression 数组中的键, comparator 函数对象</li><li><p>js 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$scope.friends = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'John'</span>,   <span class="attr">favoriteLetter</span>: <span class="string">'Ä'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Mary'</span>,   <span class="attr">favoriteLetter</span>: <span class="string">'Ü'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>,   <span class="attr">favoriteLetter</span>: <span class="string">'Ö'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Adam'</span>,   <span class="attr">favoriteLetter</span>: <span class="string">'H'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Julie'</span>,  <span class="attr">favoriteLetter</span>: <span class="string">'Z'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">$scope.localeSensitiveComparator = <span class="function"><span class="keyword">function</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// If we don't get strings, just compare by index</span></span><br><span class="line">    <span class="keyword">if</span> (v1.type !== <span class="string">'string'</span> || v2.type !== <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (v1.index &lt; v2.index) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compare strings alphabetically, taking locale into account</span></span><br><span class="line">    <span class="keyword">return</span> v1.value.localeCompare(v2.value);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li><li><p>html 如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"friends"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Favorite Letter<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;friend.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;friend.favoriteLetter&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="自定义使用"><a href="#自定义使用" class="headerlink" title="自定义使用"></a>自定义使用</h2><ul><li><p>根据系统自带的 filter 函数在 JavaScript 中的使用方式：<code>$filter(&#39;currency&#39;)(amount, symbol, fractionSize)</code>, 可以得出如下结论</p><ol><li><code>$filter(&#39;currency&#39;)</code>: $filter 本身是一个函数，传入一个字符串 <code>currency</code>, 然后再返回一个函数，名称叫 <code>currency</code></li><li><code>currency</code> 函数的参数就是 <code>amount</code>, <code>symbol</code>, <code>fractionSize</code></li><li>最后执行</li></ol></li><li><p>自定义 filter 函数 methodLink 如下</p><ul><li>功能：字符串之间通过 <code>\n</code> 分隔，通过 methodLink 函数返回字符串数组</li><li><code>input</code> 参数为待分隔的字符串</li><li><p>js 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    angular.module(<span class="string">'ngApp'</span>, [])</span><br><span class="line">        .filter(<span class="string">'methodLink'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> methodLinkArr = [];</span><br><span class="line">                <span class="keyword">var</span> methodArr = input.split(<span class="string">"\n"</span>);</span><br><span class="line">                angular.forEach(methodArr, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data != <span class="string">''</span>) &#123;</span><br><span class="line">                        methodLinkArr.push(data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> methodLinkArr;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>html 中使用如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"method in rowData.localMethod | methodLink"</span>&gt;</span></span><br><span class="line">    &#123;&#123;method&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h4 id="1-截取字符串长度"><a href="#1-截取字符串长度" class="headerlink" title="1. 截取字符串长度"></a>1. 截取字符串长度</h4><ul><li><p>在模块中定义 cut filter</p><ul><li><code>cut</code> 参数表示自定义 filter 名称</li><li><code>wordwise (boolean)</code> 参数表示是否截取，true 表示截取</li><li><code>max (integer)</code> 参数表示保留字符串的长度</li><li><code>tail (string, default: &#39; …&#39;)</code> 参数表示字符串截取后用 <code>&#39; …&#39;</code> 替换</li><li><p>js 定义如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'ngApp'</span>)</span><br><span class="line">    .filter(<span class="string">'cut'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value, wordwise, max, tail</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">            max = <span class="built_in">parseInt</span>(max, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (!max) <span class="keyword">return</span> value;</span><br><span class="line">            <span class="keyword">if</span> (value.length &lt;= max) <span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">            value = value.substr(<span class="number">0</span>, max);</span><br><span class="line">            <span class="keyword">if</span> (wordwise) &#123;</span><br><span class="line">                <span class="keyword">var</span> lastspace = value.lastIndexOf(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">if</span> (lastspace !== <span class="number">-1</span>) &#123;</span><br><span class="line">                  <span class="comment">//Also remove . and , so its gives a cleaner result.</span></span><br><span class="line">                  <span class="keyword">if</span> (value.charAt(lastspace<span class="number">-1</span>) === <span class="string">'.'</span> || value.charAt(lastspace<span class="number">-1</span>) === <span class="string">','</span>) &#123;</span><br><span class="line">                    lastspace = lastspace - <span class="number">1</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  value = value.substr(<span class="number">0</span>, lastspace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> value + (tail || <span class="string">' …'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>html 中使用如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;some_text | cut:true:100:' ...'&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-将字符串分隔成数组"><a href="#2-将字符串分隔成数组" class="headerlink" title="2. 将字符串分隔成数组"></a>2. 将字符串分隔成数组</h4><ul><li><p>字符串为 <code>com.ckjava.service.AnalysisStockService.doAnalysis</code>, 通过 javascript 的 <code>substring</code> 和 <code>lastIndexOf</code> 函数将服务名和方法分隔到一个数组中</p></li><li><p>filter 名为 <code>serviceOrMethod</code></p><ul><li><code>input</code> 参数为待分隔的字符串</li><li><code>index</code> 参数为数组中的索引</li><li><p>js 定义如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'ngApp'</span>)</span><br><span class="line">    .filter(<span class="string">'serviceOrMethod'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input,index</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> serviceMethodArr = [];</span><br><span class="line">                <span class="keyword">if</span> (!input) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                serviceMethodArr.push(input.substring(<span class="number">0</span>, input.lastIndexOf(<span class="string">"."</span>)));</span><br><span class="line">                serviceMethodArr.push(input.substring(input.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">return</span> serviceMethodArr[index];</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>这里在 <code>ui-select-choices</code> 中使用，具体如下</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ui-select-choices</span> <span class="attr">refresh</span>=<span class="string">"searchMethod($select)"</span> <span class="attr">refresh-delay</span>=<span class="string">"300"</span> <span class="attr">repeat</span>=<span class="string">"mtd in searchMethodBuffer track by $index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind-html</span>=<span class="string">"mtd | highlight: $select.search"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span></span><br><span class="line">        Method: <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind-html</span>=<span class="string">"mtd | serviceOrMethod:1 | highlight: $select.search"</span> /&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Service: <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind-html</span>=<span class="string">"mtd | serviceOrMethod:0 | highlight: $select.search"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ui-select-choices</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-将字符串分隔成数组并直接使用"><a href="#3-将字符串分隔成数组并直接使用" class="headerlink" title="3. 将字符串分隔成数组并直接使用"></a>3. 将字符串分隔成数组并直接使用</h4><ul><li><p>将通过 <code>\n</code> 换行符的字符串，具体如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.ckjava.service.AnalysisStockService.doAnalysis</span><br><span class="line">com.ckjava.service.AnalysisStockService.findLastNUp</span><br><span class="line">com.ckjava.service.AnalysisStockService.getIsAnalysis</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>filter 定义如下</p><ul><li><code>input</code> 参数为函数输入值</li><li><p>js 定义如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'ngApp'</span>)</span><br><span class="line">    .filter(<span class="string">'methodLink'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> methodLinkArr = [];</span><br><span class="line">            <span class="keyword">var</span> methodArr = input.split(<span class="string">"\n"</span>);</span><br><span class="line">            angular.forEach(methodArr, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data != <span class="string">''</span>) &#123;</span><br><span class="line">                    methodLinkArr.push(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> methodLinkArr;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>具体使用如下  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"method in rowData.localMethod | methodLink"</span>&gt;</span></span><br><span class="line">    &#123;&#123;method&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-根据值的不同返回不同的颜色"><a href="#4-根据值的不同返回不同的颜色" class="headerlink" title="4. 根据值的不同返回不同的颜色"></a>4. 根据值的不同返回不同的颜色</h4><ul><li><p>filter 定义如下</p><ul><li><code>input</code> 参数为函数输入值</li><li><p>js 定义如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'ngApp'</span>)</span><br><span class="line">    .filter(<span class="string">'colorType'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (input === <span class="string">'ERROR'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'#C9302C'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input === <span class="string">'EXECUTING'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'#FFFF01'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input === <span class="string">'COMPLETED'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'#63BBB2'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>具体使用如下  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"background-color: &#123;&#123; item.status | colorType &#125;&#125;"</span>&gt;</span>&#123;&#123;item.status&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.angularjs.org/api/ng/filter" target="_blank" rel="noopener">Filter components in ng</a>;</li></ul>]]></content>
    
    <summary type="html">
    
      AngularJS 中的 filter 组件使用总结：包含系统自带 Filter 使用和自定义 Filter 的使用，以及一些使用场景的举例。
    
    </summary>
    
      <category term="AngularJS" scheme="http://ckjava.com/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://ckjava.com/tags/AngularJS/"/>
    
      <category term="filter" scheme="http://ckjava.com/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 配置跨域访问控制的两种方法</title>
    <link href="http://ckjava.com/2019/03/05/SpringBoot-CORS-practice/"/>
    <id>http://ckjava.com/2019/03/05/SpringBoot-CORS-practice/</id>
    <published>2019-03-04T16:00:00.000Z</published>
    <updated>2019-03-05T14:26:12.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域访问概念"><a href="#跨域访问概念" class="headerlink" title="跨域访问概念"></a>跨域访问概念</h2><p>CORS（Cross Origin Resource Sharing）跨域资源共享：表示 JavaScript 代码所在的机器和后端 api 所在的机器不是同一台的情况下实现资源访问。</p><p>在前后端分离的项目中，前端一般是 SPA （Single Page Application）类型的应用，所有的 JavaScript 代码都会“下载”到用户机器的浏览器中，后端 api 在服务器端以单个机器或者集群的形式存在。</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p></blockquote><p>由于浏览器的同源策略限制，在前后端分离的项目中必须要考虑这个问题，否则会出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &apos;http://localhost:8081/api&apos; from origin &apos;http://localhost:3000&apos; has been blocked by CORS policy: Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.</span><br></pre></td></tr></table></figure><h2 id="HTTP-OPTIONS-请求"><a href="#HTTP-OPTIONS-请求" class="headerlink" title="HTTP OPTIONS 请求"></a>HTTP OPTIONS 请求</h2><p>跨域请求时候首先通过 <code>OPTIONS</code> 方法和请求头中的 <code>Access-Control-Request-Method</code> 属性向服务器端查看是否有请求权限，如果有权限才能继续请求到数据，否则出现上面的错误。有权限时服务器 <code>OPTIONS</code> 请求的响应头基本内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: *</span><br><span class="line">Access-Control-Allow-Headers: *</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS, HEAD</span><br><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><h2 id="在-SpringBoot-中实现跨域访问的方法"><a href="#在-SpringBoot-中实现跨域访问的方法" class="headerlink" title="在 SpringBoot 中实现跨域访问的方法"></a>在 SpringBoot 中实现跨域访问的方法</h2><h4 id="方法1：通过-Filter-设置通用的响应头"><a href="#方法1：通过-Filter-设置通用的响应头" class="headerlink" title="方法1：通过 Filter 设置通用的响应头"></a>方法1：通过 Filter 设置通用的响应头</h4><ul><li>新建 Filter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>,<span class="string">"User-Agent,Origin,Cache-Control,Content-type,Date,Server,withCredentials,AccessToken,username,offlineticket,Authorization"</span>);</span><br><span class="line">httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, PUT, DELETE, OPTIONS, HEAD"</span>);</span><br><span class="line"></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置 Filter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ctrip.payment.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">registry.addResourceHandler(<span class="string">"/webjars/**"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册 cors filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">someFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registration.setFilter(<span class="keyword">new</span> CorsFilter());</span><br><span class="line">    registration.addUrlPatterns(<span class="string">"/api/*"</span>);</span><br><span class="line">    registration.setName(<span class="string">"corsFilter"</span>);</span><br><span class="line">    registration.setOrder(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法2：通过-CrossOrigin-注解"><a href="#方法2：通过-CrossOrigin-注解" class="headerlink" title="方法2：通过 @CrossOrigin 注解"></a>方法2：通过 <code>@CrossOrigin</code> 注解</h4><p>在 Controller 类上使用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Api</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;/api&quot;)</span><br><span class="line">@CrossOrigin(</span><br><span class="line">        origins = &quot;*&quot;,</span><br><span class="line">        allowedHeaders = &quot;*&quot;,</span><br><span class="line">        allowCredentials = &quot;true&quot;,</span><br><span class="line">        methods = &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, RequestMethod.OPTIONS, RequestMethod.HEAD&#125;</span><br><span class="line">)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring 4.2 以上的版本才有</li><li>不仅作用于类上，也可以用在方法上，支持让类中的某个方法可以跨域请求，<strong>并且方法的配置会重置类上的配置</strong></li><li>参数说明<ul><li>maxAge: 配置响应头的 <code>Access-Control-Max-Age</code></li><li>origins： 配置响应头的 <code>Access-Control-Allow-Origin</code>，<code>*</code> 表示允许所有的请求源</li><li>allowedHeaders： 配置响应头的 <code>Access-Control-Allow-Headers</code>, <code>*</code> 表示允许所有的请求头</li><li>exposedHeaders: 配置响应头的 <code>Access-Control-Expose-Headers</code>，表示允许对应的 user-agent 设置</li><li>methods：表示支持的请求方法，配置：<code>{RequestMethod.GET, RequestMethod.POST}</code></li><li>allowCredentials: 配置响应头的 <code>Access-Control-Allow-Credentials</code>， 表示浏览器请求的时候是否需要带上相关的 cookie<ul><li>如果设置为 “”, 表示 undefined，需要包含相关的 cookie</li><li>如果设置为 false, 表示不需要包含相关的 cookie</li><li>如果设置为 true, 表示需要包含相关的 cookie</li></ul></li></ul></li></ul><h4 id="CorsFilter-和-CrossOrigin-对比"><a href="#CorsFilter-和-CrossOrigin-对比" class="headerlink" title="CorsFilter 和 @CrossOrigin 对比"></a>CorsFilter 和 <code>@CrossOrigin</code> 对比</h4><ul><li><code>@CrossOrigin</code> 注解在 spring 4.2 以上的版本才有</li><li>如果有多个 Controller 类，可以新建一个类，加上 <code>@CrossOrigin</code> 注解，其他 Controller 继承该类即可，具体如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">@CrossOrigin(</span><br><span class="line">        origins = &quot;*&quot;,</span><br><span class="line">        allowedHeaders = &quot;*&quot;,</span><br><span class="line">        allowCredentials = &quot;true&quot;,</span><br><span class="line">        methods = &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, RequestMethod.OPTIONS, RequestMethod.HEAD&#125;</span><br><span class="line">)</span><br><span class="line">public class CorsBase &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 UserController 继承 CorsBase</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Api</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;/api&quot;)</span><br><span class="line">public class UserController extends CorsBase &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文核心的内容如下</p><ul><li>跨域访问基本概念</li><li>浏览器同源策略以及 HTTP OPTIONS 请求</li><li>在 SpringBoot 中实现跨域访问的方法：Filter 和 <code>@CrossOrigin</code> 注解</li><li>在 SpringBoot 中如何配置 Filter</li><li><code>@CrossOrigin</code> 注解的使用</li></ul>]]></content>
    
    <summary type="html">
    
      SpringBoot 配置跨域访问控制的两种方法
    
    </summary>
    
      <category term="技术" scheme="http://ckjava.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringBoot" scheme="http://ckjava.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Java 中的 CLASSPATH 类路径概念</title>
    <link href="http://ckjava.com/2019/03/02/understand-java-classpath/"/>
    <id>http://ckjava.com/2019/03/02/understand-java-classpath/</id>
    <published>2019-03-01T16:00:00.000Z</published>
    <updated>2019-03-03T13:13:04.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>在通过命令行方式执行 Java 程序的时候通过 <code>-classpath</code> 选项来指定程序依赖的类库，也可以通过 <code>CLASSPATH</code> 环境变量来指定。</li><li>区别是 <code>-classpath</code> 选项只针对当前程序，而 <code>CLASSPATH</code> 环境变量可以设置到操作系统的环境变量中从而可以针对所有程序。</li><li><p><code>-classpath</code> 选项使用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar classpath1:classpath2...</span><br></pre></td></tr></table></figure></li><li><p><code>CLASSPATH</code> 环境变量使用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set CLASSPATH=classpath1;classpath2...</span><br></pre></td></tr></table></figure></li><li><p><code>-cp</code> 是 <code>-classpath</code> 的简写，使用这个参数的 Java 命令还有 jar, javac, javadoc 和 apt, 更详细的说明：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/index.html" target="_blank" rel="noopener">JDK Tools and Utilities</a></p></li><li>这些 Java 命令位于 <code>${JAVA_HOME}\bin</code> 目录下，通常情况下需要将这个目录设置到操作系统的 <code>path</code> 环境变量中，这样在 cmd 或者 shell 中就可以直接使用这些命令</li><li><code>-classpath</code> 参数值的几种使用情况<ul><li>如果是含有 class 文件的 jar 或者 zip 文件，直接用这些文件名，比如：<code>java -cp utils.jar</code></li><li>如果是一个含有 class 文件的目录， 并且类中没有 package 定义，直接使用目录名，比如：<code>java -jar c:/utils</code></li><li>如果是一个含有 class 文件的目录：c:/utils，而且该目录的类使用了包名: com.ckjava.test，应该这样使用：<code>java -cp c:/utils com.ckjava.test.TestCP</code></li></ul></li><li>windows中多个类路径需要使用 <code>;</code> 分隔，Linux 中使用 <code>:</code></li><li>默认的类路径是当前目录，用 <code>.</code> 表示，可以通过 <code>CLASSPATH</code> 环境变量或者 <code>classpath</code> 参数来覆盖默认的类路径</li><li>如果类中有 package 定义，那么 <code>.</code> 无法表示当前类路径，必须通过 <code>classpath</code> 参数来指定</li></ul><h2 id="PATH-操作系统环境变量和-CLASSPATH-环境变量"><a href="#PATH-操作系统环境变量和-CLASSPATH-环境变量" class="headerlink" title="PATH 操作系统环境变量和 CLASSPATH 环境变量"></a>PATH 操作系统环境变量和 CLASSPATH 环境变量</h2><ul><li>PATH 是操作系统环境变量，CLASSPATH 是 Java 系统的环境变量，PATH 和 CLASSPATH 大小写都可以</li><li><p>下面举个综合的例子，使用了 javac 和 java 命令</p><ul><li><p>TestCP.java, 所在目录: <code>F:\testjava\com\ckjava\test</code> , 内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.ckjava.test;</span><br><span class="line"></span><br><span class="line">public class TestCP &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TestObj testObj = new TestObj();</span><br><span class="line">        testObj.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TestObj.java, 所在目录: <code>F:\testjava\com\ckjava\test</code> 内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.ckjava.test;</span><br><span class="line"></span><br><span class="line">public class TestObj &#123;</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(&quot;this is TestObj&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 javac 编译 TestCP.java 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f:\&gt;javac -cp F:/testjava F:/testjava/com/ckjava/test/TestCP.java</span><br></pre></td></tr></table></figure><p>其中 <code>-cp</code> 指定了类路径，<strong>注意没有包含包名并且是在 f 盘根目录执行 javac 命令的</strong>，由于 TestCP.java 依赖了 TestObj.java, 执行编译后同时生成了 TestCP.class 和 TestObj.class</p></li><li><p>使用 java 执行 TestCP.class 命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f:\&gt;java -cp F:/testjava com.ckjava.test.TestCP</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is TestObj</span><br></pre></td></tr></table></figure></li><li><p>上面的 javac 和 java 命令都是配置在操作系统的 PATH 变量中的，如何使用其他版本的 javac 和 java 命令呢？下面的方法可以重置 PATH 操作系统环境变量和 CLASSPATH 环境变量，编写 <code>run.cmd</code> 脚本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set path=D:\java\jdk1.6.0_25\bin</span><br><span class="line">set classpath=F:/testjava</span><br><span class="line"></span><br><span class="line">javac F:/testjava/com/ckjava/test/TestCP.java</span><br><span class="line">java com.ckjava.test.TestCP</span><br></pre></td></tr></table></figure><p>执行：<code>F:\&gt;testjava\com\ckjava\test\run.cmd</code> 输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is TestObj</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="类路径通配符"><a href="#类路径通配符" class="headerlink" title="类路径通配符"></a>类路径通配符</h2><ul><li>可以通过<code>*</code>来匹配一个目录的所有 jar 文件，比如：<code>/lib/*</code>，不能通过 <code>/**/*.jar</code> 方式，这个有点弱鸡了。</li><li>而且 <code>/lib/*</code> 这种方式只能匹配 lib 目录下所有 jar 文件，不能匹配 class 文件</li><li><p>下面举个综合的例子</p><ul><li><p>TestUtils.java 内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.ckjava.test;</span><br><span class="line">import com.ckjava.utils.StringUtils;</span><br><span class="line"></span><br><span class="line">public class TestUtils &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        if (StringUtils.isNotBlank(args[0])) &#123;</span><br><span class="line">            System.out.println(args[0]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 StringUtils 是在 <code>F:\testjava\lib\commons-lang3-3.5.jar</code> 中</p></li><li><p>run-2.cmd 脚本的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set path=C:\Program Files\Java\jdk1.8.0_131\bin</span><br><span class="line">set classpath=F:\testjava\lib\*;F:\testjava\</span><br><span class="line"></span><br><span class="line">javac F:/testjava/com/ckjava/test/TestUtils.java</span><br><span class="line">java com.ckjava.test.TestUtils date</span><br></pre></td></tr></table></figure><p>其中通过 <code>F:\testjava\lib\*</code> 指定所有依赖 jar 的位置，<code>F:\testjava\</code> 指定class 文件<br>执行 <code>F:\&gt;testjava\com\ckjava\test\run-2.cmd</code> 输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="遇到的问题：找不到或无法加载主类-Error-Could-not-find-or-load-main-class-…”"><a href="#遇到的问题：找不到或无法加载主类-Error-Could-not-find-or-load-main-class-…”" class="headerlink" title="遇到的问题：找不到或无法加载主类(Error: Could not find or load main class …”)"></a>遇到的问题：找不到或无法加载主类(Error: Could not find or load main class …”)</h2><ul><li><p>错误重现： 到 <code>f:\testjava\com\ckjava\test</code> 目录，执行 <code>javac TestCP.java</code> 命令，可以正常编译 TestObj.class 和  TestCP.class， 但是执行 <code>java TestCP</code> 会出现第一个错误，具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f:\testjava\com\ckjava\test&gt;java TestCP</span><br><span class="line">错误: 找不到或无法加载主类 TestCP</span><br></pre></td></tr></table></figure></li><li><p>原因：javac 编译的时候在类源文件的目录下，所以无需通过 <code>-cp</code> 指定类路径，但是通过 java 运行 class 的时候，由于 class 中有包名，所以还需要指定包名才能运行，具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f:\testjava\com\ckjava\test 的目录</span><br><span class="line"></span><br><span class="line">2019/03/03  19:16    &lt;DIR&gt;          .</span><br><span class="line">2019/03/03  19:16    &lt;DIR&gt;          ..</span><br><span class="line">2019/03/03  13:58               193 run-2.cmd</span><br><span class="line">2019/03/03  13:13               148 run.cmd</span><br><span class="line">2019/03/03  19:16               344 TestCP.class</span><br><span class="line">2019/03/03  13:29               174 TestCP.java</span><br><span class="line">2019/03/03  19:16               414 TestObj.class</span><br><span class="line">2019/03/03  11:23               136 TestObj.java</span><br><span class="line">2019/03/03  13:42               249 TestUtils.java</span><br><span class="line">               7 个文件          1,658 字节</span><br><span class="line">               2 个目录 55,266,729,984 可用字节</span><br><span class="line"></span><br><span class="line">f:\testjava\com\ckjava\test&gt;java com.ckjava.test.TestCP</span><br><span class="line">this is TestObj</span><br></pre></td></tr></table></figure></li><li><p>如果在其他目录，那么正确的编译和执行的方式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f:\testjava\com&gt;javac -cp f:\testjava F:/testjava/com/ckjava/test/TestCP.java</span><br><span class="line"></span><br><span class="line">f:\testjava\com&gt;java -cp f:\testjava com.ckjava.test.TestCP</span><br><span class="line">this is TestObj</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>javac 命令编译的时候要指定类路径和完整的 Java 源文件路径</li><li>java 命令执行的时候指定类路径和完整的包名，如果没有包名，就无需指定了</li><li><p>如果类文件在 jar 中呢？，具体的指定方式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">F:\testjava&gt;jar -cvf testLib.jar com/ckjava/test/TestCP.class com/ckjava/test/TestObj.class</span><br><span class="line">已添加清单</span><br><span class="line">正在添加: com/ckjava/test/TestCP.class(输入 = 344) (输出 = 250)(压缩了 27%)</span><br><span class="line">正在添加: com/ckjava/test/TestObj.class(输入 = 414) (输出 = 286)(压缩了 30%)</span><br><span class="line"></span><br><span class="line">F:\testjava&gt;java -cp F:\testjava\testLib.jar com.ckjava.test.TestCP</span><br><span class="line">this is TestObj</span><br></pre></td></tr></table></figure></li><li><p>上面的例子需要注意的地方：<strong>当类中指定了 <code>package com.ckjava.test;</code> 那么在通过 jar 打包的时候类文件也必须带上相应的路径，而且这个路径必须是相对路径。</strong></p></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文深入介绍了如下技术点</p><ul><li>JDK 命令行工具 <code>-classpath</code> 参数</li><li>PATH 操作系统环境变量和 CLASSPATH 环境变量，以及 Java 程序执行脚本的编写</li><li>类路径通配符概念以及使用</li><li>JDK 中 javac, java, jar 命令行工具的基本使用</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html#A1100592" target="_blank" rel="noopener">Setting the Class Path</a></li></ul>]]></content>
    
    <summary type="html">
    
      深入理解 Java 中的 CLASSPATH 类路径概念
    
    </summary>
    
      <category term="技术" scheme="http://ckjava.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>将 Java 系统日志由 JUL，Log4j, Log4j2, JCL 转向 SLF4J + Logback</title>
    <link href="http://ckjava.com/2019/02/24/Java-SLF4J-Logback/"/>
    <id>http://ckjava.com/2019/02/24/Java-SLF4J-Logback/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-02-24T11:42:13.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Logback 性能比较好，在编译的时候绑定 slf4j 接口的实现。这里探讨将系统的日志实现由 JUL，Log4j, Log4j2, JCL 转向 slf4j + Logback 的方法。</p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><ul><li>JCL 和 slf4j 是接口，日志门面，不负责具体的日志打印，输出等操作</li><li>JUL，Log4j，Log4j2，Logback 是具体日志的实现</li></ul><h2 id="JUL-转向-slf4j"><a href="#JUL-转向-slf4j" class="headerlink" title="JUL 转向 slf4j"></a>JUL 转向 slf4j</h2><p>JUL 就是 jdk 自带的日志系统，位于 <code>java.util.logging</code> 包下，使用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKLog</span> </span>&#123;</span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">"JDKLog"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"jul log"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 jul-to-slf4j 将其转向 slf4j</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 从 jdk-logging到slf4j的桥梁 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jul-to-slf4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Log4j-转向-slf4j"><a href="#Log4j-转向-slf4j" class="headerlink" title="Log4j 转向 slf4j"></a>Log4j 转向 slf4j</h2><h4 id="Log4j-的使用"><a href="#Log4j-的使用" class="headerlink" title="Log4j 的使用"></a>Log4j 的使用</h4><p>Log4j 使用的时候引入 log4j 依赖，并在项目的 src\main\resources 目录下增加 log4j.xml 配置文件即可</p><ul><li>log4j 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>log4j.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">'http://jakarta.apache.org/log4j/'</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"myConsole"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">value</span>=<span class="string">"[%d&#123;dd HH:mm:ss,SSS&#125; %-5p] [%t] %c&#123;2&#125; - %m%n"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤器设置输出的级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.varia.LevelRangeFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"levelMin"</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"levelMax"</span> <span class="attr">value</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"AcceptOnMatch"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根logger的设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span> =<span class="string">"debug"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"myConsole"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4j</span> </span>&#123;</span><br><span class="line">    Logger logger= Logger.getLogger(Log4j.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"log4j1 log"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Log4j log4j = <span class="keyword">new</span> Log4j();</span><br><span class="line">        log4j.log();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[15 16:01:40,977 INFO ] [main] ckjava.Log4j - log4j1 log</span><br></pre></td></tr></table></figure><h4 id="转向-slf4j"><a href="#转向-slf4j" class="headerlink" title="转向 slf4j"></a>转向 slf4j</h4><ul><li>去掉 log4j 依赖并删除 log4j.xml 配置文件</li><li>引入 log4j-over-slf4j 依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- log4j1到slf4j的桥梁 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Log4j2-转向-slf4j"><a href="#Log4j2-转向-slf4j" class="headerlink" title="Log4j2 转向 slf4j"></a>Log4j2 转向 slf4j</h2><h4 id="Log4j2-的使用"><a href="#Log4j2-的使用" class="headerlink" title="Log4j2 的使用"></a>Log4j2 的使用</h4><ul><li>依赖 log4j-api 和 log4j-core </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Log4J 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 src\main\resources 目录增加 log4j2.xml 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>具体使用如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line">public class Log4j2 &#123;</span><br><span class="line">    private static final Logger logger = LogManager.getLogger(Log4j2.class);</span><br><span class="line"></span><br><span class="line">    public void log() &#123;</span><br><span class="line">        logger.info(&quot;log4j2 log&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Log4j2 log4j2 = new Log4j2();</span><br><span class="line">        log4j2.log();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16:21:03.623 [main] INFO  com.ckjava.Log4j2 - log4j2 log</span><br></pre></td></tr></table></figure><h4 id="转向-slf4j-1"><a href="#转向-slf4j-1" class="headerlink" title="转向 slf4j"></a>转向 slf4j</h4><ul><li>去掉 log4j-api 和 log4j-core 依赖，删除 log4j2.xml 配置文件</li><li>增加 log4j-to-slf4j 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将 log4j2的日志桥接到 slf4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JCL-详解"><a href="#JCL-详解" class="headerlink" title="JCL 详解"></a>JCL 详解</h2><h4 id="具体的使用"><a href="#具体的使用" class="headerlink" title="具体的使用"></a>具体的使用</h4><ul><li>JCL 是 jakarta.commons.logging，日志接口，需要绑定具体的日志框架才能使用</li><li>如果项目仅引入 commons-logging， 那么默认的日志框架就是 JUL。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果项目引入了 commons-logging + log4j， 那么 JCL 由 log4j 日志框架来实现，不需要桥接到 log4j</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果项目引入了 commons-logging + log4j-api + log4j-core, 那么 JCL 由 log4j2 日志框架来实现, 还需要再加入 log4j-jcl，将 jcl 桥接到 log4j 输出。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Log4J 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Apache Commons Logging Bridge --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果项目引入了 commons-logging + logback-classic + logback-core，那么 JCL 由 logback 日志框架来实现, 还需要再加入 jcl-over-slf4j，将 jcl 桥接到 logback 输出。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- commons-logging到slf4j的桥梁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- logback --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.logging.Log;</span><br><span class="line">import org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line">public class CommonsLog &#123;</span><br><span class="line">    private static Log log = LogFactory.getLog(CommonsLog.class);</span><br><span class="line"></span><br><span class="line">    public void log() &#123;</span><br><span class="line">        log.info(&quot;Commons Log &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CommonsLog commonsLog = new CommonsLog();</span><br><span class="line">        commonsLog.log();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17:10:51.340 [main] INFO  com.ckjava.CommonsLog - Commons Log</span><br></pre></td></tr></table></figure><h4 id="转向-slf4j-2"><a href="#转向-slf4j-2" class="headerlink" title="转向 slf4j"></a>转向 slf4j</h4><ul><li>通过 jcl-over-slf4j 将 commons-logging 转向 slf4j</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- commons-logging到slf4j的桥梁 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="slf4j-Logback-日志输出"><a href="#slf4j-Logback-日志输出" class="headerlink" title="slf4j + Logback 日志输出"></a>slf4j + Logback 日志输出</h2><p>slf4j 也是一个日志接口，默认由 Logback 日志框架来实现，并且它们是同一个作者开发的。</p><ul><li>slf4j + Logback 依赖如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SLF4J+LogBack--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 src\main\resources 目录增加 logback 配置文件 logback.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.ckjava"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">public class LogBack &#123;</span><br><span class="line">    static final Logger logger = LoggerFactory.getLogger(LogBack.class);</span><br><span class="line"></span><br><span class="line">    public void log() &#123;</span><br><span class="line">        logger.info(&quot;LogBack log&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LogBack logBack = new LogBack();</span><br><span class="line">        logBack.log();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17:31:28.006 [main] INFO  com.ckjava.LogBack - LogBack log</span><br></pre></td></tr></table></figure><h2 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h2><p>对于一些比较老的项目，经过了N多人的手，并且由于引入了很多三方依赖，目前项目中已经有了 JUL，Log4j, Log4j2, JCL和 SLF4J，既想输出三方依赖框架中的日志，又要保证项目中的日志正常输出，这个时候该怎么办？</p><p>具体如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 从 jdk-logging到slf4j的桥梁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- log4j1到slf4j的桥梁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 将 log4j2的日志桥接到 slf4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- commons-logging --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- commons-logging到slf4j的桥梁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SLF4J+LogBack--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件就是 logback.xml</li><li>测试如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JDKLog jdkLog = new JDKLog();</span><br><span class="line">jdkLog.log();</span><br><span class="line"></span><br><span class="line">Log4J log4j = new Log4J();</span><br><span class="line">log4j.log();</span><br><span class="line"></span><br><span class="line">Log4J2 log4j2 = new Log4J2();</span><br><span class="line">log4j2.log();</span><br><span class="line"></span><br><span class="line">CommonsLog commonsLog = new CommonsLog();</span><br><span class="line">commonsLog.log();</span><br><span class="line"></span><br><span class="line">LogBack logBack = new LogBack();</span><br><span class="line">logBack.log();</span><br></pre></td></tr></table></figure><ul><li>输出如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一月 15, 2019 5:42:45 下午 com.ckjava.JDKLog log</span><br><span class="line">信息: jul log</span><br><span class="line">17:42:45.390 [main] INFO  com.ckjava.Log4J - log4j1 log</span><br><span class="line">17:42:45.423 [main] INFO  com.ckjava.Log4J2 - log4j2 log</span><br><span class="line">17:42:45.447 [main] INFO  com.ckjava.CommonsLog - Commons Log </span><br><span class="line">17:42:45.448 [main] INFO  com.ckjava.LogBack - LogBack log</span><br></pre></td></tr></table></figure><ul><li>注意：<strong>同时需要排除 log4j，log4j-api 和 log4j-core 依赖</strong>，否则会出现类似如下错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log4j:WARN No appenders could be found for logger (org.apache.ibatis.thread.Runnable).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span><br></pre></td></tr></table></figure><h2 id="Java-日志最佳实践"><a href="#Java-日志最佳实践" class="headerlink" title="Java 日志最佳实践"></a>Java 日志最佳实践</h2><p>在大型项目开发中系统往往会分成很多模块, 比如在使用 Maven 开发 Java Web 项目中通常会以 Dao, Service, Web 分成多个项目, 每个项目都会使用日志记录功能, 而项目之间又会产生依赖 Web-&gt;Service-&gt;Dao. 这个时候只需要在 Dao 和 Service 中增加日志门面依赖即可, 也就是引入 slf4j-api. 在 Web 中引入具体的日志框架.</p><p>而在分布式服务架构中 Service 会以单独的项目启动, 此时也要引入具体的日志框架.</p>]]></content>
    
    <summary type="html">
    
      Logback 性能比较好，在编译的时候绑定 slf4j 接口的实现。这里探讨将系统的日志实现由 JUL，Log4j, Log4j2, JCL 转向 slf4j + Logback 的方法。
    
    </summary>
    
      <category term="技术" scheme="http://ckjava.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
      <category term="日志" scheme="http://ckjava.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="SLF4J" scheme="http://ckjava.com/tags/SLF4J/"/>
    
      <category term="Logback" scheme="http://ckjava.com/tags/Logback/"/>
    
  </entry>
  
  <entry>
    <title>WebJars 的介绍以及在 SpringBoot 中的使用</title>
    <link href="http://ckjava.com/2019/02/22/SpringBoot-webjars-usage/"/>
    <id>http://ckjava.com/2019/02/22/SpringBoot-webjars-usage/</id>
    <published>2019-02-21T16:00:00.000Z</published>
    <updated>2019-02-24T11:42:13.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>简单来说，WebJars 就是将 web 依赖（js，css）放到 jar 文件中，然后通过 Maven 的形式依赖到项目中，避免手工下载这些依赖。从纯前端角度来说，依赖管理有 npm, Bower, 后端有 Maven, Gradle，WebJars 就是让 web 依赖能够运行在后端 Jvm 上的技术。</p><p>像 Bootstrap, jQuery, Angular JS, Chart.js 等都在 <a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars 官网</a> 上可以找到。</p><h2 id="为什么使用-WebJars？"><a href="#为什么使用-WebJars？" class="headerlink" title="为什么使用 WebJars？"></a>为什么使用 WebJars？</h2><p>显而易见，因为简单。但不仅是依赖这么简单：</p><ul><li>清晰的管理 web 依赖</li><li>通过 Maven, Gradle 等项目管理工具就可以下载 web 依赖</li><li>解决 web 组件中传递依赖的问题以及版本问题</li><li>页面依赖的版本自动检测功能</li></ul><h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><p>在 Maven 中通过下面的依赖就可以将 bootstrap 和 jquery 引入到项目中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;bootstrap&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.7-1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>依赖导入了，这些 js 和 css 文件都在 classPath 路径下的 <code>META-INF/resources/webjars</code> 目录下。</p><ul><li>在 SpringMVC 中通过实现 WebMvcConfigurer 接口来定义这些静态文件的访问入口，具体如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebConfig implements WebMvcConfigurer &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry</span><br><span class="line">            .addResourceHandler(&quot;/webjars/**&quot;)</span><br><span class="line">            .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>xml 方式类似的配置如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:resources mapping=&quot;/webjars/**&quot; location=&quot;classpath:/META-INF/resources/webjars/&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>如果使用 SpringBoot，上面的配置也可以忽略，系统自动将 <code>/META-INF/resources/webjars</code> 映射到 <code>/webjars</code> 请求路径上。</li></ul><h2 id="自动检测依赖的版本"><a href="#自动检测依赖的版本" class="headerlink" title="自动检测依赖的版本"></a>自动检测依赖的版本</h2><p>如果使用 Spring 4.2 以上的版本，并且加入 webjars-locator 组件，就不需要在 html 添加依赖的时候填写版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;webjars-locator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.30&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>之前是 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/webjars/bootstrap/3.3.7-1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>引入 webjars-locator 后是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/webjars/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：只能去掉版本号</strong></p><h2 id="前端页面使用"><a href="#前端页面使用" class="headerlink" title="前端页面使用"></a>前端页面使用</h2><p>编写 index.html 如下，将其放到 <code>src\main\resources\public\index.html</code> 目录下，启动项目，访问 <code>http://localhost:8080/</code> 即可看到效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;webjars 测试&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;script src=&quot;/webjars/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/webjars/bootstrap/3.3.7-1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/webjars/bootstrap/3.3.7-1/css/bootstrap.min.css&quot; /&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;/webjars/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/webjars/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/webjars/bootstrap/css/bootstrap.min.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;&lt;br/&gt;</span><br><span class="line">        &lt;div class=&quot;alert alert-success&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-label=&quot;close&quot;&gt;×&lt;/a&gt;</span><br><span class="line">            &lt;strong&gt;Success!&lt;/strong&gt; It is working as we expected.</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>由于 SpringBoot 自动将 classpath 下的 <code>/static</code>, <code>/public</code>, <code>/resources</code>, <code>/META-INF/resources</code> 这些目录自动映射到 <code>/**</code> 请求路径上，因此访问 <code>http://localhost:8080/</code> 就可以找到 <code>public\index.html</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 WebJars 的相关功能以及和 SpringBoot 集成的一个例子。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.baeldung.com/maven-webjars" target="_blank" rel="noopener">Introduction to WebJars</a></li><li><a href="https://www.webjars.org/documentation" target="_blank" rel="noopener">webjar doc</a></li></ul>]]></content>
    
    <summary type="html">
    
      本文介绍了 WebJars 的相关功能以及和 SpringBoot 集成的一个例子。
    
    </summary>
    
      <category term="技术" scheme="http://ckjava.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SpringBoot" scheme="http://ckjava.com/tags/SpringBoot/"/>
    
      <category term="webjars" scheme="http://ckjava.com/tags/webjars/"/>
    
  </entry>
  
  <entry>
    <title>在 Spring 中集成 velocity</title>
    <link href="http://ckjava.com/2018/09/19/Spring-SpringMVC-integration-velocity-practice/"/>
    <id>http://ckjava.com/2018/09/19/Spring-SpringMVC-integration-velocity-practice/</id>
    <published>2018-09-18T16:00:00.000Z</published>
    <updated>2018-09-19T15:28:46.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在-SpringMVC-项目中集成-velocity"><a href="#在-SpringMVC-项目中集成-velocity" class="headerlink" title="在 SpringMVC 项目中集成 velocity"></a>在 SpringMVC 项目中集成 velocity</h2><p>这种方式的话 velocity 的所有配置都在 xml 文件中。</p><h3 id="1-在-pom-xml-中引入-velocity-的-jar-包"><a href="#1-在-pom-xml-中引入-velocity-的-jar-包" class="headerlink" title="1. 在 pom.xml 中引入 velocity 的 jar 包"></a>1. 在 pom.xml 中引入 velocity 的 jar 包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- velocity核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity核心包 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-视图配置"><a href="#2-视图配置" class="headerlink" title="2. 视图配置"></a>2. 视图配置</h3><p>在 <code>springMVC-servlet.xml</code> 文件中配置, 这里使用 VelocityLayoutViewResolver 对象, 需要默认的布局文件.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图模式配置,velocity配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"velocityConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.velocity.VelocityConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resourceLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/velocity/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:velocity.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置后缀</span></span><br><span class="line"><span class="comment">默认 VelocityViewResolver 就可以了,如果需要使用 layout 功能, 需要使用 VelocityLayoutViewResolver</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"velocityViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".vm"</span> /&gt;</span><span class="comment">&lt;!-- 视图文件的后缀名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"toolboxConfigLocation"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/velocity/tools.xml"</span> /&gt;</span><span class="comment">&lt;!--toolbox配置文件路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateToolAttribute"</span> <span class="attr">value</span>=<span class="string">"date"</span> /&gt;</span><span class="comment">&lt;!--日期函数名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numberToolAttribute"</span> <span class="attr">value</span>=<span class="string">"number"</span> /&gt;</span><span class="comment">&lt;!--数字函数名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentType"</span> <span class="attr">value</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeSpringMacroHelpers"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span><span class="comment">&lt;!--是否使用spring对宏定义的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeRequestAttributes"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span><span class="comment">&lt;!--是否开放request属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"requestContextAttribute"</span> <span class="attr">value</span>=<span class="string">"rc"</span>/&gt;</span><span class="comment">&lt;!--request属性引用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeSessionAttributes"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"layoutUrl"</span> <span class="attr">value</span>=<span class="string">"layout/default.vm"</span>/&gt;</span><span class="comment">&lt;!--指定layout文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置-velocity-properties"><a href="#3-配置-velocity-properties" class="headerlink" title="3. 配置 velocity.properties"></a>3. 配置 velocity.properties</h3><p><code>velocity.properties</code> 和 <code>springMVC-servlet.xml</code> 文件都在 <code>src/main/resources</code> 目录下,</p><p>velocity.properties 内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#encoding</span><br><span class="line">input.encoding=UTF-8</span><br><span class="line">output.encoding=UTF-8</span><br><span class="line">#autoreload when vm changed</span><br><span class="line">file.resource.loader.cache=false</span><br><span class="line">file.resource.loader.modificationCheckInterval=2</span><br><span class="line">velocimacro.library.autoreload=false</span><br></pre></td></tr></table></figure><h3 id="4-页面布局-layout-的使用"><a href="#4-页面布局-layout-的使用" class="headerlink" title="4. 页面布局 layout 的使用"></a>4. 页面布局 layout 的使用</h3><p>系统默认布局文件 <code>default.vm</code> 具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Spring MVC and Velocity&lt;/title&gt;</span><br><span class="line">    #*&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot; media=&quot;all&quot; type=&quot;text/css&quot;&gt;*#</span><br><span class="line">    &lt;script src=&quot;#springUrl(&apos;/plugins/jQuery/jquery-2.2.3.min.js&apos;)&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">    &lt;table class=&quot;tabellaLayout&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;div align=&quot;center&quot;&gt;#parse(&quot;layout/header.vm&quot;)&lt;/div&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;div align=&quot;center&quot;&gt;$screen_content&lt;/div&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;div align=&quot;center&quot;&gt;#parse(&quot;layout/footer.vm&quot;)&lt;/div&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-配置-tools-xml"><a href="#5-配置-tools-xml" class="headerlink" title="5. 配置 tools.xml"></a>5. 配置 tools.xml</h3><p>tools.xml 是 velocity 中 VelocityToolboxView 对象的配置文件，如果没有这个文件系统也不会初始化这个对象。文件默认位于项目的 <code>/WEB-INF/</code> 目录下。</p><p>具体内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">toolbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tool</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>mathTool<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>application<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.velocity.tools.generic.MathTool<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tool</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>numberTool<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>application<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.velocity.tools.generic.NumberTool<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"#0.00"</span>/&gt;</span> <span class="comment">&lt;!--2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"locale"</span> <span class="attr">value</span>=<span class="string">"zh_CN"</span>/&gt;</span> <span class="comment">&lt;!--3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tool</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>dateTool<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>application<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.velocity.tools.generic.DateTool<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"yyyy/MM/dd HH:mm:ss"</span>/&gt;</span> <span class="comment">&lt;!--2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"locale"</span> <span class="attr">value</span>=<span class="string">"zh_CN"</span>/&gt;</span> <span class="comment">&lt;!--3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"timezone"</span> <span class="attr">value</span>=<span class="string">"Asia/Shanghai"</span>/&gt;</span> <span class="comment">&lt;!--4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tool</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>listTool<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>application<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.velocity.tools.generic.ListTool<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tool</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>escTool<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>application<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.velocity.tools.generic.EscapeTool<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tool</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">toolbox</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 vm 文件中的使用方法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dateTool.format($!&#123;now&#125;)</span><br></pre></td></tr></table></figure><p>其中 dateTool 是 <code>tools.xml</code> 文件中的 key 的元素名称, format, locale, timezone 表示 DateTool 对象的三个配置参数.</p><h3 id="6-编写-Controller-和-页面"><a href="#6-编写-Controller-和-页面" class="headerlink" title="6. 编写 Controller 和 页面"></a>6. 编写 Controller 和 页面</h3><ul><li>VelocityController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/velocity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VelocityController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(&#123;<span class="string">"/myVelocity.do"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"myVelocity"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"key"</span>, <span class="string">"我来了，velocity！"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"now"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>myVelocity.vm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;show all users&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        alert(&quot;sss&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        $!&#123;key&#125;</span><br><span class="line">        $dateTool.format($!&#123;now&#125;)</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>项目启动后, 访问 <code>http://localhost:8012/test/velocity/myVelocity.do</code>, 返回内容如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header...</span><br><span class="line">我来了，velocity！</span><br><span class="line">footer...</span><br></pre></td></tr></table></figure><h2 id="在-Spring-中使用-velocity"><a href="#在-Spring-中使用-velocity" class="headerlink" title="在 Spring 中使用 velocity"></a>在 Spring 中使用 velocity</h2><p>也就是不通过 xml 配置的方式来使用，将 VelocityEngine 配置成一个 Spring Bean 对象，可以用于邮件模板，或者代码模板。Maven 依赖和上面的一样。</p><p>VelocityEngine 配置如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.runtime.RuntimeConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VelocityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> VelocityEngine <span class="title">velocityEngine</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">VelocityEngine velocityEngine = <span class="keyword">new</span> VelocityEngine();</span><br><span class="line"></span><br><span class="line">velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADER, <span class="string">"classpath"</span>);</span><br><span class="line">velocityEngine.setProperty(<span class="string">"classpath.resource.loader.class"</span>, ClasspathResourceLoader.class.getName());</span><br><span class="line">velocityEngine.setProperty(RuntimeConstants.INPUT_ENCODING, <span class="string">"UTF-8"</span>);</span><br><span class="line">velocityEngine.setProperty(RuntimeConstants.OUTPUT_ENCODING, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">velocityEngine.init();</span><br><span class="line"><span class="keyword">return</span> velocityEngine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.velocity.Template;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessVelocityTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> VelocityEngine velocityEngine;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getVelocityResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Template template = velocityEngine.getTemplate(<span class="string">"vtls/hellovelocity.vm"</span>);</span><br><span class="line">VelocityContext ctx = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line">ctx.put(<span class="string">"name"</span>, <span class="string">"模板velocity"</span>);</span><br><span class="line">ctx.put(<span class="string">"date"</span>, (<span class="keyword">new</span> Date()).toString());</span><br><span class="line"></span><br><span class="line">List temp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">temp.add(<span class="string">"1"</span>);</span><br><span class="line">temp.add(<span class="string">"2"</span>);</span><br><span class="line">ctx.put(<span class="string">"list"</span>, temp);</span><br><span class="line"></span><br><span class="line">StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">template.merge(ctx, sw);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sw.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中需要注意的是 <code>hellovelocity.vm</code> 位于 Maven 项目中的 <code>src/main/resources/vtls</code> 目录下。</p>]]></content>
    
    <summary type="html">
    
      在 Spring 或者 SpringMVC 中集成 velocity 的方法
    
    </summary>
    
      <category term="模板技术" scheme="http://ckjava.com/categories/%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="velocity" scheme="http://ckjava.com/categories/%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF/velocity/"/>
    
    
      <category term="模板技术" scheme="http://ckjava.com/tags/%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="velocity" scheme="http://ckjava.com/tags/velocity/"/>
    
  </entry>
  
  <entry>
    <title>对 JUC 中 Semaphore 的理解和使用</title>
    <link href="http://ckjava.com/2018/09/17/JUC-CyclicBarrier-understand-practice/"/>
    <id>http://ckjava.com/2018/09/17/JUC-CyclicBarrier-understand-practice/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2018-09-18T00:39:20.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Semaphore-的基本概念"><a href="#Semaphore-的基本概念" class="headerlink" title="Semaphore 的基本概念"></a>Semaphore 的基本概念</h2><p>Semaphore 翻译成字面意思为<strong>信号量</strong>，Semaphore 可以控制同时访问共享资源的线程个数，通过 <code>acquire()</code> 获取一个许可，如果没有就等待，而 <code>release()</code> 释放一个许可。</p><blockquote><p>一个计数信号量。从概念上讲，信号量维护了一个许可集。如有必要，在许可可用前会阻塞每一个 <code>acquire()</code>，然后再获取该许可。每个 <code>release()</code> 添加一个许可，从而可能释放一个正在阻塞的获取者。拿到信号量的线程可以进入代码，否则就等待。通过 <code>acquire()</code> 和 <code>release()</code> 获取和释放访问许可。</p></blockquote><p>从使用的目的上来讲和 <code>synchronized</code> 非常相似: 同一个时间点只能有一个线程能够访问共享资源. </p><ul><li>区别在于 Semaphore 可以让一组线程同时访问共享资源, 让另一组线程等待, 在一个时间点有N个线程能够访问共享资源.</li><li>Semaphore 的构造函数 <code>Semaphore(int permits)</code> 可以控制具体多少个线程可以同时访问共享资源, 最少1个, 最多应该和共享资源个数一致.</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>配合 <code>synchronized</code> 或者 Atomic 来控制一次只有一个线程可以<strong>获取</strong>共享资源, Semaphore 用于协调线程对资源的<strong>占用</strong>和<strong>释放</strong>.</p><ul><li>系统中最多有10个 Connection 对象, 那么最多只能允许 10 个线程同时使用, 只有当其中一个线程使用完一个 Connection 对象后, 其他等待的线程才能使用.</li><li>数据库中有1亿数据需要处理, 最多只能 10 个线程同时处理, 只有当某个线程处理完自己的 1 千万数据后才能从数据库中取出另 1 千万数据继续处理, 直到 1亿数据全部处理完.</li><li>当 Semaphore 对象中只有一个许可的时候, 可以实现和 <code>synchronized</code> 类似的效果, 而且支持公平锁和非公平锁.</li></ul><h2 id="场景1代码"><a href="#场景1代码" class="headerlink" title="场景1代码"></a>场景1代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 10 个连接</span></span><br><span class="line">        <span class="keyword">int</span> avaCount = <span class="number">10</span>;</span><br><span class="line">        BlockingQueue&lt;String&gt; connectionBlockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(avaCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connectionBlockingQueue.put(String.valueOf(i));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 只能 10 个线程同时访问, 控制线程数和资源数保持一致.</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(avaCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 线程池中有 15 个线程可用, 15 个线程共享 10 个数据库连接</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 提交线程执行任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> SemaphoreWorker(String.valueOf(i+<span class="number">1</span>), semaphore, connectionBlockingQueue));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line">        <span class="keyword">private</span> BlockingQueue&lt;String&gt; connectionBlockingQueue;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SemaphoreWorker</span><span class="params">(String name, Semaphore semaphore, BlockingQueue&lt;String&gt; connectionBlockingQueue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">            <span class="keyword">this</span>.connectionBlockingQueue = connectionBlockingQueue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 线程会在这里阻塞, 直到获取到许可</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; acquire, availablePermits &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, semaphore.availablePermits()&#125;));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取数据库连接</span></span><br><span class="line">            String connection = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection = connectionBlockingQueue.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 执行一些操作</span></span><br><span class="line">                <span class="keyword">long</span> s = RandomUtils.nextLong(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(s);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; acquire, work &#123;1&#125; s"</span>, <span class="keyword">new</span> Object[]&#123;name, s&#125;));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 还回数据库连接</span></span><br><span class="line">                connectionBlockingQueue.offer(connection);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 线程在这里释放许可</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; release, availablePermits &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, semaphore.availablePermits() &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">thread 11 acquire, availablePermits 0</span><br><span class="line">thread 7 acquire, availablePermits 3</span><br><span class="line">thread 6 acquire, availablePermits 4</span><br><span class="line">thread 9 acquire, availablePermits 1</span><br><span class="line">thread 1 acquire, availablePermits 8</span><br><span class="line">thread 4 acquire, availablePermits 6</span><br><span class="line">thread 8 acquire, availablePermits 2</span><br><span class="line">thread 2 acquire, availablePermits 8</span><br><span class="line">thread 5 acquire, availablePermits 5</span><br><span class="line">thread 3 acquire, availablePermits 7</span><br><span class="line">thread 1 acquire, work 1 s</span><br><span class="line">thread 1 release, availablePermits 1</span><br><span class="line">thread 10 acquire, availablePermits 0</span><br><span class="line">thread 3 acquire, work 1 s</span><br><span class="line">thread 6 acquire, work 1 s</span><br><span class="line">thread 7 acquire, work 1 s</span><br><span class="line">thread 6 release, availablePermits 1</span><br><span class="line">thread 7 release, availablePermits 2</span><br><span class="line">thread 12 acquire, availablePermits 0</span><br><span class="line">thread 14 acquire, availablePermits 0</span><br><span class="line">thread 13 acquire, availablePermits 1</span><br><span class="line">thread 3 release, availablePermits 0</span><br><span class="line">thread 11 acquire, work 2 s</span><br><span class="line">thread 15 acquire, availablePermits 0</span><br><span class="line">thread 11 release, availablePermits 1</span><br><span class="line">thread 4 acquire, work 2 s</span><br><span class="line">thread 8 acquire, work 2 s</span><br><span class="line">thread 9 acquire, work 2 s</span><br><span class="line">thread 5 acquire, work 2 s</span><br><span class="line">thread 9 release, availablePermits 2</span><br><span class="line">thread 5 release, availablePermits 3</span><br><span class="line">thread 8 release, availablePermits 4</span><br><span class="line">thread 4 release, availablePermits 1</span><br><span class="line">thread 2 acquire, work 2 s</span><br><span class="line">thread 2 release, availablePermits 5</span><br><span class="line">thread 10 acquire, work 2 s</span><br><span class="line">thread 10 release, availablePermits 6</span><br><span class="line">thread 12 acquire, work 2 s</span><br><span class="line">thread 14 acquire, work 2 s</span><br><span class="line">thread 13 acquire, work 2 s</span><br><span class="line">thread 14 release, availablePermits 7</span><br><span class="line">thread 13 release, availablePermits 8</span><br><span class="line">thread 12 release, availablePermits 9</span><br><span class="line">thread 15 acquire, work 2 s</span><br><span class="line">thread 15 release, availablePermits 10</span><br></pre></td></tr></table></figure><p>对于输出结果可以得出的结论为:</p><ul><li>15个并行的线程最后都执行完毕了, 每个线程的执行顺序为: 获取许可 -&gt; 获取数据库连接 -&gt; 执行任务 -&gt; 还回数据库连接 -&gt; 释放许可.</li><li>可用许可最多为 10, 最少为0, 当所有线程都执行完毕后, 许可为 10.</li></ul><h2 id="场景2代码"><a href="#场景2代码" class="headerlink" title="场景2代码"></a>场景2代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphoreAtomicLong</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 通过 AtomicLong 对象记录每个线程处理的起始行</span></span><br><span class="line">        AtomicLong currentRow = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 只能 10 个线程同时访问, 控制线程数和资源数保持一致.</span></span><br><span class="line">        <span class="keyword">int</span> avaCount = <span class="number">10</span>;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(avaCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 线程池中有 15 个线程可用, 15 个线程共享 10 个数据库连接</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 提交线程执行任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> SemaphoreDbWorker(String.valueOf(i+<span class="number">1</span>), semaphore, currentRow));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDbWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line">        <span class="keyword">private</span> AtomicLong currentRow;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SemaphoreDbWorker</span><span class="params">(String name, Semaphore semaphore, AtomicLong currentRow)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">            <span class="keyword">this</span>.currentRow = currentRow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 线程会在这里阻塞, 直到获取到许可</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; acquire, availablePermits &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, semaphore.availablePermits()&#125;));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> statRow = currentRow.getAndAdd(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">if</span> (statRow &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 执行一些操作</span></span><br><span class="line">                <span class="keyword">long</span> s = RandomUtils.nextLong(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(s);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; acquire, work &#123;1&#125; s, &#123;2&#125; - &#123;3&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, s, statRow, <span class="number">1000</span>&#125;));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 线程在这里释放许可</span></span><br><span class="line">                semaphore.release();</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; release, availablePermits &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, semaphore.availablePermits() &#125;));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; exit, availablePermits &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, semaphore.availablePermits() &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在场景2代码中线程获取到许可后判断有没有处理完毕: </p><ul><li>如果全部处理完毕就可以释放许可,退出 while 循环; </li><li>如果没有全部处理完毕, 继续执行, 然后释放许可, 继续 while 循环, 获得许可…</li></ul><h2 id="场景3代码"><a href="#场景3代码" class="headerlink" title="场景3代码"></a>场景3代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphoreSynchronized</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1, 多个线程访问公共变量, 在一个时间点只有一个线程能够获得许可</span></span><br><span class="line">        <span class="comment">// 使用公平锁, 先到的线程优先获得许可</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 初始化 Calculator 对象</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 线程池中有 15 个线程可用, 15 个线程并发访问 Calculator 对象</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 提交线程执行任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> CalculatorWorker(String.valueOf(i+<span class="number">1</span>), semaphore, calculator));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个线程不安全的对象, 本身没有做同步处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i += a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line">        <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CalculatorWorker</span><span class="params">(String name, Semaphore semaphore, Calculator calculator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">            <span class="keyword">this</span>.calculator = calculator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 线程会在这里阻塞, 直到获取到许可</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; acquire"</span>, <span class="keyword">new</span> Object[]&#123;name&#125;));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            calculator.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> a = calculator.get();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 线程在这里释放许可</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; release, a = &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, a &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><ul><li><code>Semaphore(int permits)</code> 构造函数, permits 参数表示许可数量</li><li><code>Semaphore(int permits, boolean fair)</code> 构造函数, permits 参数表示许可数量,  fair 表示线程获取许可的方式: 为 true 表示谁先到谁获得, 为 false 表示随机.</li><li><code>void acquire() throws InterruptedException</code> 线程以阻塞的方式获得许可, 被中断后抛出 InterruptedException 异常.</li><li><code>void release()</code> 线程释放获得的许可.</li><li><code>int availablePermits()</code> 当前 Semaphore 对象可用许可的数量</li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphoreInterrupt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1, 多个线程访问公共变量, 在一个时间点只有一个线程能够获得许可</span></span><br><span class="line">        <span class="comment">// 使用公平锁, 先到的线程优先获得许可</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 初始化 Calculator 对象</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> CalculatorWorker(<span class="string">"1"</span>, semaphore, calculator));</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> CalculatorWorker(<span class="string">"2"</span>, semaphore, calculator));</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 main 线程中将 thread2 线程中断</span></span><br><span class="line">        thread2.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个线程不安全的对象, 本身没有做同步处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i += a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line">        <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CalculatorWorker</span><span class="params">(String name, Semaphore semaphore, Calculator calculator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">            <span class="keyword">this</span>.calculator = calculator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 线程会在这里阻塞, 直到获取到许可</span></span><br><span class="line">            <span class="keyword">boolean</span> interruptFlag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; acquire"</span>, <span class="keyword">new</span> Object[]&#123;name&#125;));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                interruptFlag = <span class="keyword">true</span>;</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; InterruptedException, availablePermits &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, semaphore.availablePermits()&#125;));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过对 acquire() 方法抛出的 InterruptedException 做处理, </span></span><br><span class="line">            <span class="comment">// 如果发生 InterruptedException 就不再调用  release() 方法</span></span><br><span class="line">            <span class="keyword">if</span> (!interruptFlag) &#123;</span><br><span class="line">                calculator.add(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> a = calculator.get();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 线程在这里释放许可</span></span><br><span class="line">                semaphore.release();</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; release, a = &#123;1&#125;, availablePermits &#123;2&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, a, semaphore.availablePermits() &#125;));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">thread 1 acquire</span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1302)</span><br><span class="line">at java.util.concurrent.Semaphore.acquire(Semaphore.java:312)</span><br><span class="line">at com.ckjava.semaphore.TestSemaphoreInterrupt$CalculatorWorker.run(TestSemaphoreInterrupt.java:67)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">thread 2 InterruptedException, availablePermits 0</span><br><span class="line">thread 1 release, a = 1, availablePermits 1</span><br></pre></td></tr></table></figure><p>在 Main 函数中启动了两个线程, 只有一个许可, 手动触发 thread2 线程的 <code>interrupt()</code> 方法, 线程中判断是否发生 InterruptedException 异常, 如果发生 InterruptedException 就不再调用 <code>release()</code> 方法.</p><h2 id="没有成功调用-acquire-方法然后调用了-release-方法的问题"><a href="#没有成功调用-acquire-方法然后调用了-release-方法的问题" class="headerlink" title="没有成功调用 acquire() 方法然后调用了 release() 方法的问题"></a>没有成功调用 acquire() 方法然后调用了 release() 方法的问题</h2><p>在场景3代码中, 如果在发生 InterruptedException 后还调用了 release() 方法会发生什么事情呢?</p><p>修改 CalculatorWorker 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if (!interruptFlag) &#123;</span></span><br><span class="line">    calculator.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> a = calculator.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程在这里释放许可</span></span><br><span class="line">    semaphore.release();</span><br><span class="line">    System.out.println(MessageFormat.format(<span class="string">"thread &#123;0&#125; release, a = &#123;1&#125;, availablePermits &#123;2&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, a, semaphore.availablePermits() &#125;));</span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">thread 1 acquire</span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1302)</span><br><span class="line">at java.util.concurrent.Semaphore.acquire(Semaphore.java:312)</span><br><span class="line">at com.ckjava.semaphore.TestSemaphoreInterrupt$CalculatorWorker.run(TestSemaphoreInterrupt.java:65)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">thread 2 InterruptedException, availablePermits 0</span><br><span class="line">thread 1 release, a = 1, availablePermits 1</span><br><span class="line">thread 2 release, a = 2, availablePermits 2</span><br></pre></td></tr></table></figure><p>最后发现可用许可为2, 这与 Semaphore 构造函数中的许可数不一致, 这里可以得出</p><ul><li><code>release()</code> 方法调用前不一定要调用 <code>acquire()</code> 方法</li><li><code>release()</code> 方法会增加许可数, 不会考虑 Semaphore 构造函数中的初始许可数</li><li>在调用 <code>acquire()</code> 方法发生 InterruptedException 异常后最好不要调用 <code>release()</code> 方法</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>基于 CAS.</p>]]></content>
    
    <summary type="html">
    
      对 JUC 中 Semaphore 的理解和使用
    
    </summary>
    
      <category term="并发" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="Java" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/Java/"/>
    
      <category term="JUC" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/Java/JUC/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
      <category term="并发" scheme="http://ckjava.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="JUC" scheme="http://ckjava.com/tags/JUC/"/>
    
      <category term="Semaphore" scheme="http://ckjava.com/tags/Semaphore/"/>
    
  </entry>
  
  <entry>
    <title>对 JUC 中 CountDownLatch 的理解与使用</title>
    <link href="http://ckjava.com/2018/09/13/JUC-CountDownLatch-understand-practice/"/>
    <id>http://ckjava.com/2018/09/13/JUC-CountDownLatch-understand-practice/</id>
    <published>2018-09-12T16:00:00.000Z</published>
    <updated>2018-09-13T15:02:16.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CountDownLatch-的基本概念"><a href="#CountDownLatch-的基本概念" class="headerlink" title="CountDownLatch 的基本概念"></a>CountDownLatch 的基本概念</h2><p>CountDownLatch 类位于 java.util.concurrent 包下，利用它可以实现类似计数器的功能。比如有一个任务A，它要等待其他4个任务执行完毕之后才能执行，此时就可以利用 CountDownLatch 来实现这种功能了。</p><p>简单的说就是要等其他任务执行完毕后当前任务才能执行.</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>场景1. 只有当前线程A从DB加载数据, 线程B进行处理分析, 线程C生成统计文件全部执行完毕后, 线程D才能将统计文件以邮件发送出去.</li><li>场景2. 线程A,B,C都要等线程D执行完毕后才能同时执行, 这时可以设置 <code>CountDownLatch(int count)</code> 构造函数中的 count 为1, 这样可以最大实现线程的并行性.</li></ul><h2 id="场景1-实现代码"><a href="#场景1-实现代码" class="headerlink" title="场景1 实现代码"></a>场景1 实现代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.lang3.RandomUtils;</span><br><span class="line"></span><br><span class="line">import java.text.MessageFormat;</span><br><span class="line">import java.util.concurrent.CountDownLatch;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * CountDownLatch 的构造函数 count 表示其他线程的个数</span><br><span class="line"> * 当前线程和其他线程共享一个 CountDownLatch 对象</span><br><span class="line"> * 当前线程调用 await() 方法阻塞</span><br><span class="line"> * 其他线程在执行完毕后调用 countDown() 方法进行倒计时(count --)</span><br><span class="line"> */</span><br><span class="line">public class TestCountDownLatch &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // 这里的线程池中至少要有两个线程, 1个给当前Runner(在其他Runner执行完毕后才执行), 1个给其他Runner.</span><br><span class="line">        ExecutorService executorService  = Executors.newFixedThreadPool(2);</span><br><span class="line"></span><br><span class="line">        // CountDownLatch 构造参数表示 其他Runner 的个数, 不包含当前Runner</span><br><span class="line">        CountDownLatch countDownLatch = new CountDownLatch(3);</span><br><span class="line"></span><br><span class="line">        // 当前Runner 也需要 CountDownLatch 对象, 通过 await() 方法阻塞 当前Runner 的线程.</span><br><span class="line">        executorService.submit(new MainRunner(countDownLatch));</span><br><span class="line"></span><br><span class="line">        // 这里提交了3个Runner</span><br><span class="line">        for (int i = 1; i &lt;= 3; i++) &#123;</span><br><span class="line">            executorService.submit(new WorkRunner(String.valueOf(i), countDownLatch));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class WorkRunner implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">        private String RunnerName;</span><br><span class="line">        private CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        public WorkRunner(String runnerName, CountDownLatch countDownLatch) &#123;</span><br><span class="line">            RunnerName = runnerName;</span><br><span class="line">            this.countDownLatch = countDownLatch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                int time = RandomUtils.nextInt(1, 5);</span><br><span class="line">                TimeUnit.SECONDS.sleep(time);</span><br><span class="line"></span><br><span class="line">                System.out.println(MessageFormat.format(&quot;WorkRunner &#123;0&#125; work &#123;1&#125; s&quot;, new Object[]&#123;RunnerName, time&#125;));</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class MainRunner implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">        private CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        public MainRunner(CountDownLatch countDownLatch) &#123;</span><br><span class="line">            this.countDownLatch = countDownLatch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                countDownLatch.await();</span><br><span class="line"></span><br><span class="line">                TimeUnit.SECONDS.sleep(2);</span><br><span class="line"></span><br><span class="line">                System.out.println(&quot;MainRunner finish&quot;);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WorkRunner 2 work 2 s</span><br><span class="line">WorkRunner 1 work 2 s</span><br><span class="line">WorkRunner 3 work 3 s</span><br><span class="line">MainRunner finish</span><br></pre></td></tr></table></figure><p>其中的关键点如下:</p><ul><li>CountDownLatch 的构造函数 count 表示其他线程的个数</li><li>当前线程和其他线程共享一个 CountDownLatch 对象</li><li>当前线程调用 await() 方法阻塞</li><li>其他线程在执行完毕后调用 countDown() 方法进行倒计时(count –)</li></ul><h2 id="场景2-实现代码"><a href="#场景2-实现代码" class="headerlink" title="场景2 实现代码"></a>场景2 实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三个线程等待一个线程执行完毕后才能并行执行.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCountDownLatch1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里的线程池中至少要有4个线程, 3个给被阻塞的线程, 1 给优先执行的线程.</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        executorService.submit(<span class="keyword">new</span> TestCountDownLatch.MainRunner(countDownLatch));</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> TestCountDownLatch.MainRunner(countDownLatch));</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> TestCountDownLatch.MainRunner(countDownLatch));</span><br><span class="line"></span><br><span class="line">        executorService.submit(<span class="keyword">new</span> TestCountDownLatch.WorkRunner(String.valueOf(<span class="number">1</span>), countDownLatch));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WorkRunner 1 work 4 s</span><br><span class="line">MainRunner finish</span><br><span class="line">MainRunner finish</span><br><span class="line">MainRunner finish</span><br></pre></td></tr></table></figure><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><ul><li>CountDownLatch(int count) CountDownLatch 的构造函数, count 表示其他线程的数量.</li><li>countDown() 其他线程使用.</li><li>await() 被阻塞的线程使用.</li><li>await(long timeout, TimeUnit unit) 被阻塞的线程使用, 等待的时间超过 timeout 后继续执行.</li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p><code>await()</code> 方法会导致当前线程阻塞, 如果其他线程的 <code>countDown()</code> 方法一直没有调用会导致当前线程一直阻塞下去. 当有其他线程调用当前线程对象的 <code>interrupt()</code> 方法可以使 <code>await()</code> 方法抛出 InterruptedException 异常结束阻塞状态.</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * await() 方法使当前线程A 阻塞, 其他线程c 调用 线程A 对象的 interrupt() 方法使其从阻塞状态退出, 此时 await() 方法抛出 java.lang.InterruptedException</span></span><br><span class="line"><span class="comment"> * 线程B 在调用 countDown() 方法后正常退出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCountDownLatchInterrupt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里的线程池中至少要有4个线程, 3个给被阻塞的线程, 1 给优先执行的线程.</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Thread workThreaad = <span class="keyword">new</span> Thread(<span class="keyword">new</span> WorkRunner(<span class="string">"workThreaad"</span>, countDownLatch));</span><br><span class="line">        Thread awaitThreaad = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AwaitRunner(<span class="string">"awaitThreaad"</span>, countDownLatch));</span><br><span class="line">        Thread interruptThreaad = <span class="keyword">new</span> Thread(<span class="keyword">new</span> InterruptRunner(awaitThreaad));</span><br><span class="line"></span><br><span class="line">        workThreaad.start();</span><br><span class="line">        awaitThreaad.start();</span><br><span class="line">        interruptThreaad.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String RunnerName;</span><br><span class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WorkRunner</span><span class="params">(String runnerName, CountDownLatch countDownLatch)</span> </span>&#123;</span><br><span class="line">            RunnerName = runnerName;</span><br><span class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">6000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; finish"</span>, <span class="keyword">new</span> Object[]&#123;RunnerName&#125;));</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AwaitRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String RunnerName;</span><br><span class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AwaitRunner</span><span class="params">(String runnerName, CountDownLatch countDownLatch)</span> </span>&#123;</span><br><span class="line">            RunnerName = runnerName;</span><br><span class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// await() 方法使当前线程阻塞,</span></span><br><span class="line">                countDownLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.err.print(MessageFormat.format(<span class="string">"AwaitRunner &#123;0&#125; has InterruptedException:\n"</span>, <span class="keyword">new</span> Object[]&#123;RunnerName&#125;));</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; finish"</span>, <span class="keyword">new</span> Object[]&#123;RunnerName&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Thread targetThread;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InterruptRunner</span><span class="params">(Thread targetThread)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.targetThread = targetThread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"interrupt targetThread"</span>);</span><br><span class="line">            targetThread.interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>基于 CAS.</p>]]></content>
    
    <summary type="html">
    
      对 JUC 中 CountDownLatch 的理解与使用
    
    </summary>
    
      <category term="并发" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="Java" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/Java/"/>
    
      <category term="JUC" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/Java/JUC/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
      <category term="并发" scheme="http://ckjava.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="JUC" scheme="http://ckjava.com/tags/JUC/"/>
    
      <category term="CountDownLatch" scheme="http://ckjava.com/tags/CountDownLatch/"/>
    
  </entry>
  
  <entry>
    <title>对 JUC 中 CyclicBarrier 的理解和使用</title>
    <link href="http://ckjava.com/2018/09/13/JUC-CyclicBarrier-understand-practice/"/>
    <id>http://ckjava.com/2018/09/13/JUC-CyclicBarrier-understand-practice/</id>
    <published>2018-09-12T16:00:00.000Z</published>
    <updated>2018-09-13T15:03:54.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CyclicBarrier-基本概念"><a href="#CyclicBarrier-基本概念" class="headerlink" title="CyclicBarrier 基本概念"></a>CyclicBarrier 基本概念</h2><p>字面意思循环栅栏，它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活.</p><p>CyclicBarrier 默认的构造方法是 <code>CyclicBarrier(int parties)</code>，其参数表示屏障拦截的线程数量，每个线程调用 await 方法告诉 <code>CyclicBarrier</code> 我已经到达了屏障，然后当前线程被阻塞。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>CyclicBarrier 可以用于多线程计算数据，最后合并计算结果的应用场景。</p><ul><li>场景1: 我们用一个Excel保存了用户所有银行流水，每个Sheet保存一个帐户近一年的每笔银行流水，现在需要统计用户的日均银行流水，先用多线程处理每个sheet里的银行流水，都执行完之后，得到每个sheet的日均银行流水，最后，再用barrierAction用这些线程的计算结果，计算出整个Excel的日均银行流水。</li><li>场景2: 有一亿条数据需要处理, 需要控制线程的数量和内存使用率不要太高, 只能并行10个线程每次处理1千万条后再处理下一个1千万条, 每次处理1千万条后还要发邮件通知一下.</li></ul><h2 id="场景1-实现代码"><a href="#场景1-实现代码" class="headerlink" title="场景1: 实现代码"></a>场景1: 实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有所有线程的 await() 方法阻塞时, totalRunner 线程才开始执行</span></span><br><span class="line"><span class="comment">// 被 await() 方法阻塞的线程, 在 totalRunner 线程执行完毕后才能继续执行</span></span><br><span class="line"><span class="comment">// CyclicBarrier 中的第一个参数表示被 await() 方法阻塞的线程的数目</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyclicBarrierTestBarrierAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 首先获取excel sheet 的个数</span></span><br><span class="line">        <span class="keyword">int</span> sheetSize = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 2. 初始化队列, 并设置大小, 和 sheet 数目一致, 用于存储每个线程获取到的数据</span></span><br><span class="line">        ArrayBlockingQueue arrayBlockingQueue = <span class="keyword">new</span> ArrayBlockingQueue(sheetSize);</span><br><span class="line"></span><br><span class="line">        TotalRunner totalRunner = <span class="keyword">new</span> TotalRunner(<span class="string">"total"</span>, arrayBlockingQueue);</span><br><span class="line">        <span class="comment">// 3. 创建 CyclicBarrier 对象, await 线程数目和 sheet 数目一致</span></span><br><span class="line">        <span class="comment">// totalRunner 用于等所有 await 线程执行完毕后优先执行的逻辑</span></span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(sheetSize, totalRunner);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建线程池, 并设置大小, 和 sheet 数目一致, 用于 await 线程执行</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(sheetSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 提交到线程池中执行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sheetSize; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> ExcelRunner(cyclicBarrier, arrayBlockingQueue, String.valueOf(i+<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个线程并行计算数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line">        <span class="keyword">private</span> ArrayBlockingQueue arrayBlockingQueue;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ExcelRunner</span><span class="params">(CyclicBarrier cyclicBarrier, ArrayBlockingQueue arrayBlockingQueue, String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">            <span class="keyword">this</span>.arrayBlockingQueue = arrayBlockingQueue;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Integer data = RandomUtils.nextInt(<span class="number">100</span>, <span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                arrayBlockingQueue.put(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; produce data is &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, data&#125;));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等所有线程执行完毕后, 这个线程统计最终数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TotalRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> ArrayBlockingQueue arrayBlockingQueue;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TotalRunner</span><span class="params">(String name, ArrayBlockingQueue arrayBlockingQueue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.arrayBlockingQueue = arrayBlockingQueue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; start ..."</span>, <span class="keyword">new</span> Object[]&#123;name&#125;));</span><br><span class="line">            Integer t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Iterator it = arrayBlockingQueue.iterator(); it.hasNext();) &#123;</span><br><span class="line">                Object object = it.next();</span><br><span class="line">                t += Integer.parseInt(object.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; sum is &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, t&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total start ...</span><br><span class="line">total sum is 7,545</span><br><span class="line">1 produce data is 3,879</span><br><span class="line">3 produce data is 1,585</span><br><span class="line">2 produce data is 2,081</span><br></pre></td></tr></table></figure><p>其中需要注意的地方如下</p><ul><li>只有所有线程的 await() 方法阻塞时, totalRunner 线程才开始执行.</li><li>被 await() 方法阻塞的线程, 在 totalRunner 线程执行完毕后才能继续执行.</li><li>CyclicBarrier 中的第一个参数表示被 await() 方法阻塞的线程的数目.</li></ul><h2 id="场景2-实现代码"><a href="#场景2-实现代码" class="headerlink" title="场景2: 实现代码"></a>场景2: 实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里假设 startRow 是从数据库中读取数据的起始行数 mysql 中相当于 limit 中的第一个参数</span></span><br><span class="line"><span class="comment"> * 使用 AtomicInteger 确保每个并行线程从数据库中可以读取到自己唯一的100万数据</span></span><br><span class="line"><span class="comment"> * do...while 循环可以确保 10个线程同时到达 await() 方法后可以循环执行,直到达到某个条件</span></span><br><span class="line"><span class="comment"> * 这里才能最能体现 CyclicBarrier 对象的含义:循环栅栏, 所有线程都到达  await() 方法后(到达栅栏后)又可以回过头继续重复执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyclicBarrierTestBarrierActionPlus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadNumber = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger startRow = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(threadNumber, <span class="keyword">new</span> SendEmailRunner(<span class="string">"total"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(threadNumber);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadNumber; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> DataProcessRunner(String.valueOf(i + <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 ExecutorService 对象的 shutdown() 方法 和 isTerminated() 方法组合判断 1 亿数据是否全部处理完毕</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (executorService.isTerminated()) &#123;</span><br><span class="line">                System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; finish, total &#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"main"</span>, startRow.get()&#125;));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个线程并行计算数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProcessRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataProcessRunner</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// do while 循环可以确保循环执行,直到达到某个条件</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 获取读取的起始记录和记录数</span></span><br><span class="line">                Integer rows = <span class="number">100</span>;</span><br><span class="line">                Integer start = startRow.getAndAdd(rows);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模拟读取和处理的过程</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(RandomUtils.nextInt(<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; process data limit &#123;1&#125;,&#123;2&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, start, rows&#125;));</span><br><span class="line">                    <span class="comment">// 等所有10个线程全部处理完各自的 100 万数据后再会进入下一次循环</span></span><br><span class="line">                    <span class="comment">// 这里才能最能体现 CyclicBarrier 对象的含义:循环栅栏, 所有线程都到达  await() 方法后(到达栅栏后)又可以回过头继续重复执行</span></span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (startRow.get() &lt; <span class="number">10000</span>); <span class="comment">// 循环处理到达了某个条件, 这里是处理完了 1 亿数据</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// CycBarrier 的模板代码</span></span><br><span class="line">            <span class="comment">/*do &#123;</span></span><br><span class="line"><span class="comment">                // doing work</span></span><br><span class="line"><span class="comment">                cyclicBarrier.await();</span></span><br><span class="line"><span class="comment">            &#125; while (condition_true);*/</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等所有线程到达 await() 方法后, 这个线程统计最终数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmailRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SendEmailRunner</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125; process finish, total &#123;1&#125;, sendEmail success"</span>, <span class="keyword">new</span> Object[]&#123;name, startRow.get()&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中关键点如下</p><ul><li>这里假设 startRow 是从数据库中读取数据的起始行数, 在 mysql 中相当于 limit 中的第一个参数</li><li>使用 AtomicInteger 确保每个并行线程从数据库中可以读取到自己唯一的100万数据</li><li><code>do...while</code> 循环可以确保 10个线程同时到达 await() 方法后可以循环执行,直到达到某个条件</li><li>这里才能最能体现 CyclicBarrier 对象的含义:循环栅栏, 所有线程都到达  await() 方法后(到达栅栏后)又可以回过头继续重复执行</li><li>CyclicBarrier 需要配合 while 循环才能实现 Cyclic 功能,模板代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    // doing work</span><br><span class="line">    cyclicBarrier.await();</span><br><span class="line">&#125; while (condition);</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">7 process data limit 600,100</span><br><span class="line">5 process data limit 400,100</span><br><span class="line">10 process data limit 900,100</span><br><span class="line">2 process data limit 100,100</span><br><span class="line">1 process data limit 0,100</span><br><span class="line">8 process data limit 700,100</span><br><span class="line">9 process data limit 800,100</span><br><span class="line">4 process data limit 300,100</span><br><span class="line">3 process data limit 200,100</span><br><span class="line">6 process data limit 500,100</span><br><span class="line">total process finish, total 1,000, sendEmail success</span><br><span class="line">1 process data limit 1,500,100</span><br><span class="line">9 process data limit 1,700,100</span><br><span class="line">6 process data limit 1,000,100</span><br><span class="line">4 process data limit 1,800,100</span><br><span class="line">7 process data limit 1,100,100</span><br><span class="line">10 process data limit 1,300,100</span><br><span class="line">8 process data limit 1,600,100</span><br><span class="line">3 process data limit 1,900,100</span><br><span class="line">2 process data limit 1,400,100</span><br><span class="line">5 process data limit 1,200,100</span><br><span class="line">total process finish, total 2,000, sendEmail success</span><br><span class="line">3 process data limit 2,800,100</span><br><span class="line">2 process data limit 2,900,100</span><br><span class="line">10 process data limit 2,600,100</span><br><span class="line">4 process data limit 2,400,100</span><br><span class="line">5 process data limit 2,000,100</span><br><span class="line">9 process data limit 2,200,100</span><br><span class="line">6 process data limit 2,300,100</span><br><span class="line">7 process data limit 2,500,100</span><br><span class="line">1 process data limit 2,100,100</span><br><span class="line">8 process data limit 2,700,100</span><br><span class="line">total process finish, total 3,000, sendEmail success</span><br><span class="line">5 process data limit 3,500,100</span><br><span class="line">6 process data limit 3,700,100</span><br><span class="line">2 process data limit 3,200,100</span><br><span class="line">10 process data limit 3,300,100</span><br><span class="line">7 process data limit 3,800,100</span><br><span class="line">9 process data limit 3,600,100</span><br><span class="line">4 process data limit 3,400,100</span><br><span class="line">3 process data limit 3,100,100</span><br><span class="line">8 process data limit 3,000,100</span><br><span class="line">1 process data limit 3,900,100</span><br><span class="line">total process finish, total 4,000, sendEmail success</span><br><span class="line">8 process data limit 4,900,100</span><br><span class="line">9 process data limit 4,600,100</span><br><span class="line">4 process data limit 4,800,100</span><br><span class="line">7 process data limit 4,500,100</span><br><span class="line">2 process data limit 4,300,100</span><br><span class="line">5 process data limit 4,100,100</span><br><span class="line">1 process data limit 4,000,100</span><br><span class="line">10 process data limit 4,400,100</span><br><span class="line">6 process data limit 4,200,100</span><br><span class="line">3 process data limit 4,700,100</span><br><span class="line">total process finish, total 5,000, sendEmail success</span><br><span class="line">2 process data limit 5,500,100</span><br><span class="line">5 process data limit 5,600,100</span><br><span class="line">4 process data limit 5,200,100</span><br><span class="line">8 process data limit 5,100,100</span><br><span class="line">9 process data limit 5,300,100</span><br><span class="line">3 process data limit 5,000,100</span><br><span class="line">7 process data limit 5,400,100</span><br><span class="line">10 process data limit 5,800,100</span><br><span class="line">6 process data limit 5,900,100</span><br><span class="line">1 process data limit 5,700,100</span><br><span class="line">total process finish, total 6,000, sendEmail success</span><br><span class="line">2 process data limit 6,100,100</span><br><span class="line">5 process data limit 6,200,100</span><br><span class="line">1 process data limit 6,000,100</span><br><span class="line">10 process data limit 6,800,100</span><br><span class="line">9 process data limit 6,500,100</span><br><span class="line">7 process data limit 6,700,100</span><br><span class="line">3 process data limit 6,600,100</span><br><span class="line">8 process data limit 6,400,100</span><br><span class="line">6 process data limit 6,900,100</span><br><span class="line">4 process data limit 6,300,100</span><br><span class="line">total process finish, total 7,000, sendEmail success</span><br><span class="line">10 process data limit 7,400,100</span><br><span class="line">7 process data limit 7,600,100</span><br><span class="line">1 process data limit 7,300,100</span><br><span class="line">9 process data limit 7,500,100</span><br><span class="line">8 process data limit 7,800,100</span><br><span class="line">6 process data limit 7,900,100</span><br><span class="line">3 process data limit 7,700,100</span><br><span class="line">4 process data limit 7,000,100</span><br><span class="line">5 process data limit 7,200,100</span><br><span class="line">2 process data limit 7,100,100</span><br><span class="line">total process finish, total 8,000, sendEmail success</span><br><span class="line">6 process data limit 8,600,100</span><br><span class="line">10 process data limit 8,100,100</span><br><span class="line">5 process data limit 8,900,100</span><br><span class="line">2 process data limit 8,000,100</span><br><span class="line">8 process data limit 8,500,100</span><br><span class="line">9 process data limit 8,400,100</span><br><span class="line">1 process data limit 8,300,100</span><br><span class="line">7 process data limit 8,200,100</span><br><span class="line">3 process data limit 8,700,100</span><br><span class="line">4 process data limit 8,800,100</span><br><span class="line">total process finish, total 9,000, sendEmail success</span><br><span class="line">1 process data limit 9,700,100</span><br><span class="line">6 process data limit 9,100,100</span><br><span class="line">10 process data limit 9,200,100</span><br><span class="line">4 process data limit 9,000,100</span><br><span class="line">2 process data limit 9,400,100</span><br><span class="line">9 process data limit 9,600,100</span><br><span class="line">3 process data limit 9,900,100</span><br><span class="line">5 process data limit 9,300,100</span><br><span class="line">7 process data limit 9,800,100</span><br><span class="line">8 process data limit 9,500,100</span><br><span class="line">total process finish, total 10,000, sendEmail success</span><br><span class="line">main finish, total 10,000</span><br></pre></td></tr></table></figure><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><ul><li><code>public CyclicBarrier(int parties)</code> 带有 await() 方法的线程数目的构造函数.</li><li><code>public CyclicBarrier(int parties, Runnable barrierAction)</code> 带有 barrierAction 对象的构造函数, 所有线程到达 await() 方法后才会执行.</li><li><code>public void reset()</code> 触发带有 await() 方法的线程抛出 <code>java.util.concurrent.BrokenBarrierException</code> 异常, 退出阻塞状态, 并且不再循环执行, 相当于将循环栅栏破坏了.</li><li><code>public int getNumberWaiting()</code> 获取当前到达 await() 方法的线程数目, 用于调试.</li><li><code>public int await()</code> 阻塞当前线程</li><li><code>public int await(long timeout, TimeUnit unit)</code> 阻塞当前线程, 当超时的时候抛出 <code>java.util.concurrent.BrokenBarrierException</code> 异常</li><li><code>public boolean isBroken()</code> 判断循环栅栏是否被破坏</li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p><code>await()</code> 方法会阻塞当前线程, 如果其他线程调用当前线程的 <code>interrupt()</code> 方法或者 <code>await(long timeout, TimeUnit unit)</code> 方法抛出 <code>java.util.concurrent.TimeoutException</code> 异常都会破坏循环栅栏, 这时可以通过 <code>isBroken()</code> 方法判断循环栅栏是否被破坏.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public static class DataProcessRunner implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">    public DataProcessRunner(String name, CyclicBarrier cyclicBarrier) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.cyclicBarrier = cyclicBarrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        // do while 循环可以确保循环执行,直到达到某个条件</span><br><span class="line">        do &#123;</span><br><span class="line">            // 获取读取的起始记录和记录数</span><br><span class="line">            Integer rows = 100;</span><br><span class="line">            Integer start = startRow.getAndAdd(rows);</span><br><span class="line"></span><br><span class="line">            // 模拟读取和处理的过程</span><br><span class="line">            try &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(RandomUtils.nextInt(1, 5));</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.println(MessageFormat.format(&quot;&#123;0&#125; process data limit &#123;1&#125;,&#123;2&#125;&quot;, new Object[]&#123;name, start, rows&#125;));</span><br><span class="line">                // 等所有10个线程全部处理完各自的 100 万数据后再会进入下一次循环</span><br><span class="line">                // 这里才能最能体现 CyclicBarrier 对象的含义:循环栅栏, 所有线程都到达  await() 方法后(到达栅栏后)又可以回过头继续重复执行</span><br><span class="line">                cyclicBarrier.await(1, TimeUnit.SECONDS);</span><br><span class="line">            &#125; catch (TimeoutException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (BrokenBarrierException e) &#123;</span><br><span class="line">                System.out.println(&quot;BrokenBarrierException&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (cyclicBarrier.isBroken()) &#123;</span><br><span class="line">                // do....</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; while (startRow.get() &lt; 10000 &amp;&amp; !cyclicBarrier.isBroken()); // 循环处理到达了某个条件, 这里是处理完了 1 亿数据</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个 Runnable 对象在循环栅栏被破坏后会主动退出执行, 并且可以做一些回滚操作.</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>ReentrantLock</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://ifeve.com/concurrency-cyclicbarrier/" target="_blank" rel="noopener">并发工具类（二）同步屏障CyclicBarrier</a></li></ul>]]></content>
    
    <summary type="html">
    
      对 JUC 中 CyclicBarrier 的理解和使用
    
    </summary>
    
      <category term="并发" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="Java" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/Java/"/>
    
      <category term="JUC" scheme="http://ckjava.com/categories/%E5%B9%B6%E5%8F%91/Java/JUC/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
      <category term="并发" scheme="http://ckjava.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="JUC" scheme="http://ckjava.com/tags/JUC/"/>
    
      <category term="CyclicBarrier" scheme="http://ckjava.com/tags/CyclicBarrier/"/>
    
  </entry>
  
  <entry>
    <title>关于职业生涯和流量的思考</title>
    <link href="http://ckjava.com/2018/09/08/about-career-flow-some-thinking/"/>
    <id>http://ckjava.com/2018/09/08/about-career-flow-some-thinking/</id>
    <published>2018-09-07T16:00:00.000Z</published>
    <updated>2018-09-08T13:49:33.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看了很多, 想了很多, 顿悟了: 靠自己的才华获得流量才是未来, 怎么有才华呢, 学习呗.</p><p><strong>没钱没关系只有靠提高自己的技术水平收获流量才会有未来.</strong></p><h2 id="成功的关键点"><a href="#成功的关键点" class="headerlink" title="成功的关键点"></a>成功的关键点</h2><p>《疯狂的石头》是宁浩导演的成名作，其中的电影风格在他未来作品中也得到了延续。也就是说他初次的尝试获得了成功，并坚持了下去。</p><p>微信头条号作者紫竹张先生靠做自媒体也获得了成功, 文章针砭时弊, 风格犀利, 逻辑严密 收获了众多的关注, 阅读量, 点赞以及打赏, 每日笔耕不辍, 实现了财务自由.</p><p>这类成功还有很多, 共同之处在于靠自己的才华和努力实现了财务自由, 不必寄人篱下, 为老板而出卖自己的时间.</p><p>我从中悟出的关键在于:</p><ul><li>个人才华</li><li>找到合适的方向, 具体就是做流量, 让自己的才华得到他人的关注和赞赏</li><li>坚持不断的完善和努力</li></ul><h2 id="个人才华"><a href="#个人才华" class="headerlink" title="个人才华"></a>个人才华</h2><p>个人才华基本是先天的决定的, 当然后天的努力也是必须的. 成功人士全都是人精, 而且成功人士努力的程度也是常人所不能及的.</p><p>这里必须排除官二代和富二代, 因为他们出身的时候就有了社会关系和财富, 平民是没有这些资源. 富二代王思聪刚开始创业就有5个亿, 平民到了社会无论多么有才华最开始只能给人打工. 人才市场上挤满了985毕业生, 硕士, 博士.</p><p>平民通过工作获得了自己的社会资源和第一桶金, 不满足于将自己的梦想出卖给死工资, 因此这里靠自己的才华和社会资源开始创业, 一旦开始创业就没有了工作, 创业失败就只能再回来打工, 可见平民创业的风险极高.</p><p>真正的创业应该越早越好, 而且方向必须对. 方向就是让自己的才华得到公众的赞赏, 得到关注, 成为领域里面的明星. </p><p>举例如下</p><ul><li>贾斯汀·比伯长得帅, 会唱歌, 早期靠在 YouTube 上唱歌吸引了大批粉丝, 最后成了知名的歌手, 亿万富豪, 1994年3月出生, 年仅24岁.</li><li>头条号上的野居青年, 三个小伙子从美院毕业后选择靠拍视频在网络上收获了大量的关注和点赞, 虽然目前看来离成功还很远, 但是他们选择了一条看似没用实则很聪明的路线: 让自己的才华得到公众的赞赏, 得到关注, 以后加点广告或者靠卖自己的绘画作品肯定也能实现财富自由.</li><li>马克·扎克伯格在大学宿舍开发了 facebook 这个产品, 在全球收获了上亿的用户从而实现了个人的财富自由.</li></ul><p>类似上面的例子还有很多, 共同点就是</p><ul><li>创业早, 资金少</li><li>靠自己的才华和独到的眼光</li><li>做流量, 财富自由靠流量变现</li></ul><h2 id="做流量"><a href="#做流量" class="headerlink" title="做流量"></a>做流量</h2><p>流量就是影响力, 知名度, 有了流量就有了一切. 得到的积极关注越多, 成功离自己就越近. </p><ul><li>明星: 靠粉丝的流量</li><li>商品: 花钱买广告, 让关注的人多, 有了关注才能卖出去</li><li>网站: BAT 哪个不是用钱砸出来的流量</li><li>自媒体: 微信号/头条号 靠自己的文章吸引流量获得收益</li></ul><p>从平民的角度来说, 获得稳定的流量只能靠自己的才华, 这里要从两个角度来说了: </p><ul><li>平民必须意识到靠自己的才华获得流量才是实现财富自由的关键</li><li>尽量把所有的精力投入到做个人流量上, 而不是老想着在职场上获得晋升, 因为这条路实在太艰辛了, 而且容易走弯路</li></ul><p>从程序员角度来说, 写好技术方面的文章或者开发某个程序组件, 让自己的才华得到认可也是一种做流量的方法.</p><h2 id="坚持不断的完善和努力"><a href="#坚持不断的完善和努力" class="headerlink" title="坚持不断的完善和努力"></a>坚持不断的完善和努力</h2><p>在做流量的过程中需要不断的完善自己的方法和不断的学习. </p><ul><li>什么样的方法可以提高流量, 这个需要自己的总结和尝试</li><li>通过不断的学习提高自己的才华, 个人也需要成长和进步</li></ul><p>总之就是有了明确的目标后需要不间断的学习从而实现流量的增长.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好好做流量.</p>]]></content>
    
    <summary type="html">
    
      关于职业生涯和流量的思考
    
    </summary>
    
      <category term="生活" scheme="http://ckjava.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="非技术" scheme="http://ckjava.com/categories/%E7%94%9F%E6%B4%BB/%E9%9D%9E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="生活" scheme="http://ckjava.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="职业" scheme="http://ckjava.com/tags/%E8%81%8C%E4%B8%9A/"/>
    
      <category term="流量" scheme="http://ckjava.com/tags/%E6%B5%81%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>对 byte &amp; 0xFF 的理解</title>
    <link href="http://ckjava.com/2018/05/03/java-byte-0XFF/"/>
    <id>http://ckjava.com/2018/05/03/java-byte-0XFF/</id>
    <published>2018-05-02T16:00:00.000Z</published>
    <updated>2018-05-05T04:32:51.249Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客涉及到对 Java 基本类型的转换, 对原码, 反码, 补码的理解, 对 移位运算, 位运算 的应用.</p><h2 id="由一段代码引入的思考"><a href="#由一段代码引入的思考" class="headerlink" title="由一段代码引入的思考"></a>由一段代码引入的思考</h2><p>先看看下面一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/** 字节数组转成16进制字符串 **/</span><br><span class="line">public static String byte2hex(byte[] b) &#123; // 一个字节的数，</span><br><span class="line">    StringBuffer sb = new StringBuffer(b.length * 2);</span><br><span class="line">    String tmp = &quot;&quot;;</span><br><span class="line">    for (int n = 0; n &lt; b.length; n++) &#123;</span><br><span class="line">        // 整数转成十六进制表示</span><br><span class="line">        tmp = Integer.toHexString(b[n] &amp; 0XFF);</span><br><span class="line">        if (tmp.length() == 1) &#123;</span><br><span class="line">            sb.append(&quot;0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.toString().toUpperCase(); // 转成大写</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中关键是 <code>b[n] &amp; 0XFF</code>, 为什么要一个 byte 要和<code>0XFF</code>进行与(&amp;)运算后再传给 <code>toHexString</code> 方法?</p><p>目前知道的一点是 <code>0XFF</code> 也就是 int 类型的 255, 在 Java 中可以使用八进制、十六进制的数据直接给long, int, short, byte类型的数据赋值.</p><h2 id="关于原码-反码-补码"><a href="#关于原码-反码-补码" class="headerlink" title="关于原码, 反码, 补码"></a>关于原码, 反码, 补码</h2><p>计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p><h4 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a>1. 原码</h4><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p><p><code>[+1]原 = 0000 0001</code></p><p><code>[-1]原 = 1000 0001</code></p><p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:</p><p><code>[1111 1111 , 0111 1111]</code></p><p>即</p><p><code>[-127 , 127]</code></p><h4 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h4><p>反码的表示方法是:</p><p>正数的反码是其本身</p><p>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.</p><p><code>[+1] = [00000001]原 = [00000001]反</code></p><p><code>[-1] = [10000001]原 = [11111110]反</code></p><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p><h4 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h4><p>补码的表示方法是:</p><p>正数的补码就是其本身</p><p>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p><p><code>[+1] = [00000001]原 = [00000001]反 = [00000001]补</code></p><p><code>[-1] = [10000001]原 = [11111110]反 = [11111111]补</code></p><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p><p>从上面可以看到, 对于正数: 原码, 反码, 补码都是一样的, 对于负数:原码, 反码, 补码都不一样.</p><h2 id="关于-amp-与运算"><a href="#关于-amp-与运算" class="headerlink" title="关于&amp;与运算"></a>关于<code>&amp;</code>与运算</h2><p><code>&amp;</code>运算是二进制数据的计算方式, 两个操作位都为1，结果才为1，否则结果为0. 在上面的 <code>b[n] &amp; 0XFF</code> 计算过程中, byte 有 8bit, <code>OXFF</code> 是16进制的255, 表示的是 int 类型, int 有 32bit.</p><p>如果b[n]为 <code>-118</code>, 那么其原码表示为</p><blockquote><p>00000000 00000000 00000000 10001010</p></blockquote><p>反码为</p><blockquote><p>11111111 11111111 11111111 11110101 </p></blockquote><p>补码为</p><blockquote><p>11111111 11111111 11111111 11110110</p></blockquote><p><code>0XFF</code> 表示16进制的数据255, 原码, 反码, 补码都是一样的, 其二进制数据为</p><blockquote><p>00000000 00000000 00000000 11111111</p></blockquote><p><code>0XFF</code> 和 <code>-118</code> 进行<code>&amp;</code>运算后结果为</p><blockquote><p>00000000 00000000 00000000 11110110</p></blockquote><p>还原为原码后为</p><blockquote><p>00000000 00000000 00000000 10001010</p></blockquote><p>其表示的 int 值为 138, 可见将 byte 类型的 -118 与 <code>0XFF</code> 进行与运算后值由 -118 变成了 int 类型的 138, 其中低8位和byte的-118完全一致.</p><p>如果b[n]为0或者正数, 其原码, 反码, 补码都是一样的, 和 <code>0XFF</code> 进行与运算后的结果不变.</p><p>byte 的取值范围为 [-128, 127], 根据上面的转换过程我们可以发现, 只有当 byte 的值为负数的时候才有必要和<code>0XFF</code> 进行与运算, 为0或者为正数的时候byte的值和对应int的值完全一致.</p><h2 id="关于无符号-gt-gt-gt-右移运算"><a href="#关于无符号-gt-gt-gt-右移运算" class="headerlink" title="关于无符号&gt;&gt;&gt;右移运算"></a>关于无符号<code>&gt;&gt;&gt;</code>右移运算</h2><p>通过上面的对 原码, 反码, 补码 和 <code>&amp;</code>与运算的理解已经可以解答:<strong>为什么一个字节要和<code>0XFF</code>进行与(&amp;)运算后再传给 <code>toHexString</code> 方法?</strong>这个问题. 这里再深入了解一下 int 和 byte 互转的问题.</p><h4 id="int-转-byte数组"><a href="#int-转-byte数组" class="headerlink" title="int 转 byte数组"></a>int 转 byte数组</h4><p>int 有 32bit, byte 有 8bit, 那么一个 int 转成 byte 后有 4 个byte. 过程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] intToBytes(<span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] intbyte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>) (a &gt;&gt;&gt; <span class="number">24</span>);</span><br><span class="line"><span class="keyword">byte</span> c = (<span class="keyword">byte</span>) (a &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"><span class="keyword">byte</span> d = (<span class="keyword">byte</span>) (a &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line"><span class="keyword">byte</span> e = (<span class="keyword">byte</span>) (a);</span><br><span class="line"></span><br><span class="line">intbyte[<span class="number">0</span>] = b;</span><br><span class="line">intbyte[<span class="number">1</span>] = c;</span><br><span class="line">intbyte[<span class="number">2</span>] = d;</span><br><span class="line">intbyte[<span class="number">3</span>] = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> intbyte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用到了无符号<code>&gt;&gt;&gt;</code>右移运算, 为什么不用有符号<code>&gt;&gt;</code>右移运算呢? 两者的区别在于前者向右移动后无论当前数据是正数还是负数都用 <code>0</code> 来填充.</p><p>这里拿值为 -10 的 byte 举个例子.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int a = -120;</span><br><span class="line">System.out.println(&quot;toBinaryString(a)=&quot;+Integer.toBinaryString(a));</span><br><span class="line"></span><br><span class="line">int b = a &gt;&gt;&gt; 2;</span><br><span class="line">int c = a &gt;&gt; 2;</span><br><span class="line">System.out.println(&quot;int b=&quot;+b);</span><br><span class="line">System.out.println(&quot;toBinaryString(b)=&quot;+Integer.toBinaryString(b));</span><br><span class="line">System.out.println(&quot;int c=&quot;+c);</span><br><span class="line">System.out.println(&quot;toBinaryString(c)=&quot;+Integer.toBinaryString(c));</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toBinaryString(a)=11111111111111111111111110001000</span><br><span class="line">b=1073741794</span><br><span class="line">toBinaryString(b)=111111111111111111111111100010</span><br><span class="line">c=-30</span><br><span class="line">toBinaryString(c)=11111111111111111111111111100010</span><br></pre></td></tr></table></figure><p>可见对b进行无符号<code>&gt;&gt;&gt;</code>右移运算2位后, 高2位变成了<code>00</code>. </p><p>还有一点需要注意的是:无符号右移运算符 <code>&gt;&gt;&gt;</code> 只对32位和64位的值有意义.</p><p>回到上面 int 转 byte 的例子. 如果传入的 int 值为 55588, 其二进制表示为</p><blockquote><p>00000000 00000000 11011001 00100100</p></blockquote><ul><li><code>&gt;&gt;&gt; 24</code> 无符号向右移动 24 位后为(把<code>00000000 11011001 00100100</code>挤掉了,高位用<code>0</code>填充)</li></ul><blockquote><p>00000000 00000000 00000000 <strong>00000000</strong></p></blockquote><p>转成 byte 后为 <code>00000000</code> (其实就是低8位), intbyte数组下标0的值为 <code>00000000</code></p><ul><li><code>&gt;&gt;&gt; 16</code> 无符号向右移动 16 位后为(把<code>11011001 00100100</code>挤掉了,高位用<code>0</code>填充)</li></ul><blockquote><p>00000000 00000000 <strong>00000000 00000000</strong></p></blockquote><p>转成 byte 后为 <code>00000000</code>, intbyte数组下标1的值为 <code>00000000</code></p><ul><li><code>&gt;&gt;&gt; 8</code> 无符号向右移动 8 位后为(把<code>00100100</code>挤掉了,高位用<code>0</code>填充)</li></ul><blockquote><p>00000000 00000000 00000000 <strong>11011001</strong></p></blockquote><p>转成 byte 后为 <code>11011001</code>, intbyte数组下标2的值为 <code>11011001</code></p><ul><li>最后intbyte数组下标3的值为 <code>00100100</code>.</li></ul><p>经过上面的计算, 就将一个 int 转成了长度为4的 byte 数组.</p><h4 id="byte数组-转-int"><a href="#byte数组-转-int" class="headerlink" title="byte数组 转 int"></a>byte数组 转 int</h4><p>对于上面的 byte 数组如何转回 int 呢? 方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = (intbyte[<span class="number">0</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line"><span class="keyword">int</span> b = (intbyte[<span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>; </span><br><span class="line"><span class="keyword">int</span> c = (intbyte[<span class="number">2</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>; </span><br><span class="line"><span class="keyword">int</span> d = (intbyte[<span class="number">3</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line">System.out.println(<span class="string">"a|b|c|d = "</span> + (a|b|c|d));</span><br></pre></td></tr></table></figure><p>其中想当然会用到<code>&lt;&lt;</code>左移动, 因为前面用到了右移嘛.</p><p>第一个 byte 先跟 <code>0XFF</code> 进行与运算转成 int, 然后向左移动 24 位变成 a</p><blockquote><p><strong>00000000</strong> 00000000 00000000 00000000</p></blockquote><p>第二个 byte 先跟 <code>0XFF</code> 进行与运算转成 int, 然后向左移动 16 位变成 b</p><blockquote><p>00000000 <strong>00000000</strong> 00000000 00000000</p></blockquote><p>第三个 byte 先跟 <code>0XFF</code> 进行与运算转成 int, 然后向左移动 8 位变成 c</p><blockquote><p>00000000 00000000 <strong>11011001</strong> 00000000</p></blockquote><p>第四个 byte 跟 <code>0XFF</code> 进行与运算转成 int d</p><blockquote><p>00000000 00000000 00000000 <strong>00100100</strong></p></blockquote><p>最后还要用到<code>|</code>或运算, 或运算规律：两个位只要有一个为1，那么结果就是1，否则就为0. </p><p>a 和 b 的或运算结果为</p><blockquote><p><strong>00000000</strong> <strong>00000000</strong> 00000000 00000000</p></blockquote><p>上面的结果再和 c 的或运算结果为</p><blockquote><p><strong>00000000</strong> <strong>00000000</strong> <strong>11011001</strong> 00000000</p></blockquote><p>上面的结果再和 d 的或运算结果为</p><blockquote><p><strong>00000000</strong> <strong>00000000</strong> <strong>11011001</strong> <strong>00100100</strong></p></blockquote><p>最终将 byte 数组又转成了 int.</p><h4 id="单个-byte-转成-int"><a href="#单个-byte-转成-int" class="headerlink" title="单个 byte 转成 int"></a>单个 byte 转成 int</h4><p>根据上面的分析, 单个 byte 转成 int 其实就是将 byte 和 int 类型的 255 进行(&amp;)与运算即可. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte b = 25;</span><br><span class="line">int a = b &amp; 0XFF; // 或者 b &amp; 255;</span><br></pre></td></tr></table></figure><p>现在已经知道了在 Java 中通过补码来表示负数, 对于0和正数来说:原码,反码,补码都是一样的. 那么可以得出的结论是:<strong>对于 byte[-128,127], 其[0,127]范围的数据和 int 中的 [0,127] 完全一致,不需要 <code>&amp; 0XFF</code>, 只有对于 [-128,-1] 的 byte 数据才需要 <code>&amp; 0XFF</code></strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.toHexString((<span class="keyword">byte</span>)<span class="number">138</span> &amp; <span class="number">0XFF</span>).toUpperCase());</span><br><span class="line">System.out.println(Integer.toHexString(<span class="number">138</span>).toUpperCase());</span><br><span class="line"></span><br><span class="line">System.out.println(Integer.toHexString((<span class="keyword">byte</span>)-<span class="number">138</span> &amp; <span class="number">0XFF</span>).toUpperCase());</span><br><span class="line"><span class="keyword">int</span> a = (<span class="keyword">byte</span>)-<span class="number">138</span> &amp; <span class="number">0XFF</span>;</span><br><span class="line">System.out.println(<span class="string">"a="</span>+a);</span><br><span class="line">System.out.println(Integer.toHexString(a).toUpperCase());</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">8A</span><br><span class="line">8A</span><br><span class="line">76</span><br><span class="line">a=118</span><br><span class="line">76</span><br></pre></td></tr></table></figure><h2 id="最后一个问题"><a href="#最后一个问题" class="headerlink" title="最后一个问题"></a>最后一个问题</h2><p><code>Integer.toHexString(b[n] &amp; 0XFF);</code> 返回16进制的字符串，最长2个字符，最少1个字符，为什么？这个就相对简单了，无需研究 <code>toHexString</code> 方法的具体实现，实验的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = -<span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">127</span>;</span><br><span class="line">System.out.println(Integer.toHexString(a &amp; <span class="number">0XFF</span>));</span><br><span class="line">System.out.println(Integer.toHexString(c &amp; <span class="number">0XFF</span>));</span><br><span class="line">System.out.println(Integer.toHexString(b &amp; <span class="number">0XFF</span>));</span><br></pre></td></tr></table></figure><p>返回的结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">80</span><br><span class="line">0</span><br><span class="line">7f</span><br></pre></td></tr></table></figure><p>对于 byte[-128,127] 转成16进制后都小于 <code>OXFF</code>（255）, 因此是不会超过3个字符串的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://zim.logdown.com/posts/397666-0xff-is" target="_blank" rel="noopener">0xFF 是什么?</a></li><li><a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.htm" target="_blank" rel="noopener">原码, 反码, 补码 详解</a></li><li><a href="https://blog.csdn.net/LVGAOYANH/article/details/53486933" target="_blank" rel="noopener">浅谈 &amp;0xFF操作</a></li><li><a href="https://blog.csdn.net/xiaochunyong/article/details/7748713" target="_blank" rel="noopener">Java 位运算(移位、位与、或、异或、非）</a></li></ul>]]></content>
    
    <summary type="html">
    
      这篇博客涉及到对 Java 基本类型的转换, 对原码, 反码, 补码的理解, 对 移位运算, 位运算 的应用.
    
    </summary>
    
      <category term="Java" scheme="http://ckjava.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
      <category term="byte" scheme="http://ckjava.com/tags/byte/"/>
    
      <category term="OXFF" scheme="http://ckjava.com/tags/OXFF/"/>
    
      <category term="原码" scheme="http://ckjava.com/tags/%E5%8E%9F%E7%A0%81/"/>
    
      <category term="反码" scheme="http://ckjava.com/tags/%E5%8F%8D%E7%A0%81/"/>
    
      <category term="补码" scheme="http://ckjava.com/tags/%E8%A1%A5%E7%A0%81/"/>
    
      <category term="移位运算" scheme="http://ckjava.com/tags/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="位运算" scheme="http://ckjava.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>总结 git 中有关远端仓库和本地仓库的命令</title>
    <link href="http://ckjava.com/2018/04/10/git-remote-branch-command/"/>
    <id>http://ckjava.com/2018/04/10/git-remote-branch-command/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-04-10T12:51:33.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建空的-git-本地仓库"><a href="#创建空的-git-本地仓库" class="headerlink" title="创建空的 git 本地仓库"></a>创建空的 git 本地仓库</h2><p>在一个空的目录下面通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>来创建一个空的 git 本地仓库, 随后下面有关远端仓库和本地仓库的命令可以用来完成 git 开发环境或者发布环境的搭建.</p><h2 id="远端仓库相关"><a href="#远端仓库相关" class="headerlink" title="远端仓库相关"></a>远端仓库相关</h2><ul><li>查看当前所有的远端仓库详情</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><ul><li>添加一个 远端仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add toulezu_pha git@github.com:toulezu/phabricator.git</span><br></pre></td></tr></table></figure><p>其中 <code>toulezu_pha</code> 是远端的名称, 可以自己起一个, <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:toulezu/phabricator.git` 远端仓库地址</p><ul><li>删除一个 远端仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm toulezu_pha</span><br></pre></td></tr></table></figure><ul><li>修改 远端仓库 的名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename toulezu_pha origin</span><br></pre></td></tr></table></figure><p>其中 <code>toulezu_pha</code> 是现在的名称, <code>origin</code> 是修改后的名称</p><ul><li>查看 远端仓库 的详细信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><ul><li>添加远端仓库后, 将所有数据同步到本地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch toulezu_pha</span><br></pre></td></tr></table></figure><ul><li>将远端仓库的所有数据同步到本地后, 检出远端仓库的某个分支, 并且该分支追踪远端仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b toulezu_pha_master toulezu_pha/master</span><br></pre></td></tr></table></figure><p>其中 <code>toulezu_pha_master</code> 是本地分支的名称</p><h2 id="本地仓库相关"><a href="#本地仓库相关" class="headerlink" title="本地仓库相关"></a>本地仓库相关</h2><ul><li>查看本地仓库的详细信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><ul><li>修改本地仓库分支名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m toulezu_pha_master master</span><br></pre></td></tr></table></figure><p>其中 <code>toulezu_pha_master</code> 是现在的名称, <code>master</code> 是修改后的名称</p><ul><li>修改本地仓库分支名称后设置与远程分支关联</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch master --set-upstream-to origin/master</span><br></pre></td></tr></table></figure><ul><li>删除本地仓库分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      总结 git 中有关远端仓库和本地仓库的命令
    
    </summary>
    
      <category term="git" scheme="http://ckjava.com/categories/git/"/>
    
    
      <category term="git" scheme="http://ckjava.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java 动态代理的应用</title>
    <link href="http://ckjava.com/2018/01/15/java-dynamic-apply/"/>
    <id>http://ckjava.com/2018/01/15/java-dynamic-apply/</id>
    <published>2018-01-14T16:00:00.000Z</published>
    <updated>2018-03-17T10:36:21.903Z</updated>
    
    <content type="html"><![CDATA[<p>这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现. 基本步骤如下</p><ul><li>根据提供的接口数组创建代理类 proxyClass</li><li>获取代理类 proxyClass 的构造器 proxyClassConstructor, 参数必须实现 InvocationHandler 相关接口</li><li>根据构造器 proxyClassConstructor 创建接口实例, 该实例由jvm创建, </li><li>AOP 拦截器实现了对代理对象方法在执行过程中的拦截, 从而实现在待拦截方法执行的前后,抛出异常等情况下埋入相关逻辑.</li><li>拦截器形成责任链, 每个拦截器完成不同的拦截任务, 最后一个拦截器必须实现对待拦截对象的调用, 也就是说最后一个拦截器中必须有代理对象的一个实例, 其他前面的拦截器就负责执行前的拦截处理.</li></ul><p>相关代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截 open 方法</span></span><br><span class="line">AInterceptor ainc = <span class="keyword">new</span> AInterceptor();</span><br><span class="line"><span class="comment">// 拦截 close 方法</span></span><br><span class="line">BInterceptor binc = <span class="keyword">new</span> BInterceptor();</span><br><span class="line">ainc.setNext(binc);</span><br><span class="line"><span class="comment">// 注解拦截</span></span><br><span class="line">AnnotationInterceptor annc = <span class="keyword">new</span> AnnotationInterceptor();</span><br><span class="line">binc.setNext(annc);</span><br><span class="line"><span class="comment">// 拦截其他方法</span></span><br><span class="line">AopInterceptor defc = <span class="keyword">new</span> AopInterceptor(<span class="keyword">new</span> MyConnectionImpl());</span><br><span class="line">annc.setNext(defc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AInterceptor (next)-&gt; BInterceptor</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*Class&lt;?&gt; proxyClass = Proxy.getProxyClass(AppMain.class.getClassLoader(), new Class[] &#123; IConnection.class &#125;);</span></span><br><span class="line"><span class="comment">Constructor&lt;?&gt; proxyClassConstructor = proxyClass.getConstructor(new Class[] &#123; InvocationHandler.class &#125;);</span></span><br><span class="line"><span class="comment">IConnection conn = (IConnection) proxyClassConstructor.newInstance(ainc); // 这里必须是 AInterceptor 的实例, 由 AInterceptor 一级级向下寻找</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">IConnection conn = (IConnection) Proxy.newProxyInstance(AppMain.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123; IConnection.class &#125;, ainc);</span><br><span class="line"></span><br><span class="line">conn.open();</span><br><span class="line"></span><br><span class="line">conn.create();</span><br><span class="line"></span><br><span class="line">conn.get(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">conn.get(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">conn.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="责任链设计模式的实现"><a href="#责任链设计模式的实现" class="headerlink" title="责任链设计模式的实现"></a>责任链设计模式的实现</h2><blockquote><p>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。</p></blockquote><p>本文的这个例子中 <code>AInterceptor</code>, <code>BInterceptor</code>, <code>AnnotationInterceptor</code>, <code>AopInterceptor</code> 组合成一个 责任链, 在他们的共同父类 <code>AbstractInterceptorHandler</code> 中有一个 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(AbstractInterceptorHandler next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法, 用于保存对下家的引用. 当在调用 IConnection 中每一个方法的时候责任链都会进行拦截, 从上到下的调用关系如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AInterceptor</span><br><span class="line">    next-&gt;</span><br><span class="line">        BInterceptor</span><br><span class="line">            next-&gt;</span><br><span class="line">                AnnotationInterceptor</span><br><span class="line">                        next-&gt;</span><br><span class="line">                            AopInterceptor</span><br></pre></td></tr></table></figure><p>其中 <code>AInterceptor</code> 和 <code>BInterceptor</code> 根据方法名来拦截具体的方法, 不仅可以获取方法的参数, 甚至可以替换原有方法的执行逻辑.</p><p>比如 <code>AInterceptor</code> 的 invoke 方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AInterceptor ..."</span>);</span><br><span class="line"><span class="keyword">if</span> (method.getName().equals(<span class="string">"open"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"AInterceptor intercept open method"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.invoke(proxy, method, args); <span class="comment">// a.调用默认的 open 方法</span></span><br><span class="line"><span class="comment">//return "替换 open 方法的执行结果"; // b.替换 open 方法的具体实现</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.invoke(proxy, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用其中 a 中的逻辑, 输出结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AInterceptor ...</span><br><span class="line">AInterceptor intercept open method</span><br><span class="line">BInterceptor ...</span><br><span class="line">AnnotationInterceptor ...</span><br><span class="line">AopInterceptor ...</span><br><span class="line">AopInterceptor 目标方法执行前, before execute</span><br><span class="line">MyConnectionImpl do open</span><br><span class="line">AopInterceptor 目标方法执行后, after execute</span><br><span class="line">AopInterceptor 目标方法在返回前, before returning</span><br><span class="line">AInterceptor ...</span><br><span class="line">BInterceptor ...</span><br><span class="line">AnnotationInterceptor ...</span><br><span class="line">AopInterceptor ...</span><br><span class="line">AopInterceptor 目标方法执行前, before execute</span><br><span class="line">MyConnectionImpl do create</span><br><span class="line">AopInterceptor 目标方法执行后, after execute</span><br><span class="line">AopInterceptor 目标方法在返回前, before returning</span><br></pre></td></tr></table></figure><p>当使用其中 b 中的逻辑, 输出结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AInterceptor ...</span><br><span class="line">AInterceptor intercept open method</span><br><span class="line">AInterceptor ...</span><br><span class="line">BInterceptor ...</span><br><span class="line">AnnotationInterceptor ...</span><br><span class="line">AopInterceptor ...</span><br><span class="line">AopInterceptor 目标方法执行前, before execute</span><br><span class="line">MyConnectionImpl do create</span><br><span class="line">AopInterceptor 目标方法执行后, after execute</span><br><span class="line">AopInterceptor 目标方法在返回前, before returning</span><br></pre></td></tr></table></figure><h2 id="AOP-编程"><a href="#AOP-编程" class="headerlink" title="AOP 编程"></a>AOP 编程</h2><p>在上面的责任链中 AopInterceptor 负责对 IConnection 中的所有方法进行拦截, 也是责任链中最底层的一层. 当然了, 如果其他拦截对象对目标方法进行了替换处理, 这里就无法拦截了.</p><p>其中关键就在目标方法执行的前后,遇到异常以及返回前加入一些 AOP 逻辑, 比如日志, 根据方法的参数来判断方法的执行权限, 事务等重复性的代码.</p><p>关于 AnnotationInterceptor 的 invoke 方法实现的说明如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * proxy 由 jvm 创建的类实例, 没有数据状态, 但是可以获取到类的相关信息,比如方法, 注解等信息</span></span><br><span class="line"><span class="comment"> * method 代理对象的方法</span></span><br><span class="line"><span class="comment"> * args 代理对象的方法的参数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * method.invoke(conn, args) 中的 conn 表示在执行过程中具体执行哪个接口实现类, 也可以根据传入方法参数的不同来动态选择实现类, 这里是根据构造函数传入的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AopInterceptor ..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"AopInterceptor 目标方法执行前, before execute"</span>);</span><br><span class="line">Object obj = method.invoke(conn, args);</span><br><span class="line">System.out.println(<span class="string">"AopInterceptor 目标方法执行后, after execute"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(<span class="string">"AopInterceptor 目标方法执行中遇到异常, exception"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"AopInterceptor 目标方法在返回前, before returning"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解的实现"><a href="#注解的实现" class="headerlink" title="注解的实现"></a>注解的实现</h2><p>定义注解如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotNull &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotEmpty &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的注解作用于方法的参数上面, 注解的保留策略在方法执行过程中实现. 将定义的注解作用于 IConnection 接口中的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(@NotNull @NotEmpty String key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(@NotNull String key, @NotNull String value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将 <code>@NotNull</code> 注解作用于方法的参数上面, 并且传入的参数为 null, 将会抛出 RuntimeException 异常; 如果同时将 <code>@NotNull</code> 和 <code>@NotEmpty</code>注解作用于方法的参数上面, 并且传入的参数为 null 或者为空字符串 “”, 也将会抛出 RuntimeException 异常</p><p>将 AnnotationInterceptor 加入责任链后, 即可拦截在应用执行过程中遇到的参数为 null 或者为 “” 的问题. </p><p>AnnotationInterceptor 中的 invoke 方法的实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AnnotationInterceptor ..."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是针对接口中的方法如果带有参数并且加上了 @NotNull 注解的处理</span></span><br><span class="line"><span class="comment">// 如果参数为 null 就会抛出 RuntimeException 异常</span></span><br><span class="line"><span class="comment">// method.getParameterAnnotations(); 返回 Annotation 的二维数组, 第一纬表示参数索引, 第二维表示参数对应的注解列表</span></span><br><span class="line">Annotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterAnnotations.length; i++) &#123;</span><br><span class="line">Annotation[] annotations = parameterAnnotations[i];</span><br><span class="line"><span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line"><span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> NotNull &amp;&amp; args[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"AnnotationInterceptor[the parameter has NotNull Annotation, so must be not null, method = "</span>+method.getName()+<span class="string">", arg = "</span>+args[i]+<span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> NotEmpty &amp;&amp; String.valueOf(args[i]).equals(<span class="string">""</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"AnnotationInterceptor[the parameter has NotEmpty Annotation, so must be not empty, method = "</span>+method.getName()+<span class="string">", arg = "</span>+args[i]+<span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.invoke(proxy, method, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据目标方法参数带上的注解来自定义相应的逻辑, 这个例子演示了注解的定义以及实现.</p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p>本文中的代码在: <a href="https://github.com/toulezu/play/tree/master/test-proxy-class" target="_blank" rel="noopener">代码地址</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.javainterviewpoint.com/java-constructor-newinstance-method-example/" target="_blank" rel="noopener">Java Constructor.newInstance() 的例子</a></li><li><a href="http://www.cnblogs.com/techyc/p/3455950.html" target="_blank" rel="noopener">Java的动态代理(dynamic proxy)</a></li><li><a href="http://www.cnblogs.com/lyajs/articles/5712316.html" target="_blank" rel="noopener">责任链设计模式【过滤器、拦截器】</a></li></ul>]]></content>
    
    <summary type="html">
    
      这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现
    
    </summary>
    
      <category term="Java" scheme="http://ckjava.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ckjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一次恢复误删除 git 提交的经历</title>
    <link href="http://ckjava.com/2018/01/11/git-commit-recovery/"/>
    <id>http://ckjava.com/2018/01/11/git-commit-recovery/</id>
    <published>2018-01-10T16:00:00.000Z</published>
    <updated>2018-03-17T10:36:21.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><p>在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 此时不小心把 commit 到本地的那次提交给删除了或者弄丢了.</p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>使用命令行模式进入到项目所在路径, 然后执行如下命令:</p><ul><li><p><code>git log -g</code> 找到丢失代码的分支的 commit_id</p></li><li><p><code>git branch recover_branch commit_id</code> 使用 commit_id 来创建分支 recover_branch, 这样丢失的代码就在 recover_branch 分支上了.</p></li></ul><h2 id="如何回退-commit"><a href="#如何回退-commit" class="headerlink" title="如何回退 commit"></a>如何回退 commit</h2><p>在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 可以在想回退的 commit 上面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右键 -&gt; 选择(重置当前分支到此次提交) -&gt; 选择(混合合并 - 保持工作副本并重置索引)</span><br></pre></td></tr></table></figure><p>点击确定即可.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://sumsung753.blog.163.com/blog/static/146364501201301711943864/" target="_blank" rel="noopener">从Git仓库中恢复已删除的分支、文件或丢失的commit</a></li></ul>]]></content>
    
    <summary type="html">
    
      一次恢复误删除 git 提交的经历
    
    </summary>
    
      <category term="git" scheme="http://ckjava.com/categories/git/"/>
    
    
      <category term="git" scheme="http://ckjava.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中对闭包和匿名函数的理解</title>
    <link href="http://ckjava.com/2017/11/29/understand-JavaScript-closure-anonymous-function/"/>
    <id>http://ckjava.com/2017/11/29/understand-JavaScript-closure-anonymous-function/</id>
    <published>2017-11-28T16:00:00.000Z</published>
    <updated>2018-01-01T12:55:41.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从一个例子带出的问题"><a href="#从一个例子带出的问题" class="headerlink" title="从一个例子带出的问题"></a>从一个例子带出的问题</h2><p>完整的使用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function checkTaskMainJobStatus() &#123;</span><br><span class="line">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class="line">          (function (taskMain) &#123;</span><br><span class="line">              JobInfoService.searchJob(&#123; &apos;param&apos;:taskMain.id &#125;)</span><br><span class="line">                  .then(</span><br><span class="line">                      function (response) &#123;</span><br><span class="line">                          if (response != null &amp;&amp; response.length &gt; 0) &#123;</span><br><span class="line">                              if (response[0].activity) &#123;</span><br><span class="line">                                  taskMain.jobStatus = true;</span><br><span class="line">                                  taskMain.jobStatusLabel = &apos;开启&apos;;</span><br><span class="line">                              &#125; else &#123;</span><br><span class="line">                                  taskMain.jobStatus = false;</span><br><span class="line">                                  taskMain.jobStatusLabel = &apos;关闭&apos;;</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125; else &#123;</span><br><span class="line">                              taskMain.jobStatus = false;</span><br><span class="line">                              taskMain.jobStatusLabel = &apos;关闭&apos;;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      function (errResponse) &#123;</span><br><span class="line">                          console.error(&apos;loadJobDetail has error, errResponse = &apos; + JSON.stringify(errResponse));</span><br><span class="line">                      &#125;</span><br><span class="line">                  );</span><br><span class="line">          &#125;)($scope.taskMains[i]);</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简写如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function checkTaskMainJobStatus() &#123;</span><br><span class="line">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class="line">            (function (taskMain) &#123;</span><br><span class="line">                JobInfoService.searchJob(&#123; &apos;param&apos;:taskMain.id &#125;)</span><br><span class="line">                  .then(</span><br><span class="line">                      function (response) &#123;</span><br><span class="line">                         // 使用 taskMain 的逻辑</span><br><span class="line">                      &#125;,</span><br><span class="line">                      function (errResponse) &#123;</span><br><span class="line">                         // 使用 taskMain 的逻辑</span><br><span class="line">                      &#125;</span><br><span class="line">                  );</span><br><span class="line">            &#125;)($scope.taskMains[i]);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照下面的写法就会出现问题 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function checkTaskMainJobStatus() &#123;</span><br><span class="line">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class="line">            JobInfoService.searchJob(&#123; &apos;param&apos;:$scope.taskMains[i].id &#125;)</span><br><span class="line">                  .then(</span><br><span class="line">                      function (response) &#123;</span><br><span class="line">                         // 使用 $scope.taskMains[i] 的逻辑</span><br><span class="line">                      &#125;,</span><br><span class="line">                      function (errResponse) &#123;</span><br><span class="line">                         // 使用 $scope.taskMains[i] 的逻辑</span><br><span class="line">                      &#125;</span><br><span class="line">                  );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因在于 <code>$scope.taskMains[i]</code> 是 for 循环带来的一个局部变量, 而 searchJob 函数返回的 <code>$promise</code> 对象在循环结束后仍然使用了无效的局部变量.</p><p>而通过匿名函数的方式将 <code>$scope.taskMains[i]</code> 局部变量传递给 <code>$promise</code> 使用, 在 <code>$promise</code> 中使用 <code>$scope.taskMains[i]</code> 变量就是闭包使用. </p><p>闭包可以维持（keep alive）这些变量。在上面的例子中，外部函数创建局部变量 <code>$scope.taskMains[i]</code> ，并且最终退出；但是，如果任何一个或多个内部函数在外部函数退出后却没有退出，那么内部函数就维持了外部函数的局部数据, 这里的内部函数就是匿名函数.</p><h2 id="对闭包的理解"><a href="#对闭包的理解" class="headerlink" title="对闭包的理解"></a>对闭包的理解</h2><p>只要在一个函数内部出现了另一个函数, 那么内部的函数就是闭包, 外部函数即使已经执行完毕退出了,内部的函数仍然可以使用外部函数的变量,并且该变量对于内部函数来说是不变的.</p><p>类似 Java 中的内部类, 外部传递给内部类中方法的变量是 final 修饰过的.</p><h2 id="对匿名函数的理解"><a href="#对匿名函数的理解" class="headerlink" title="对匿名函数的理解"></a>对匿名函数的理解</h2><p>基本形式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(function ([p1,p2...pN]) &#123;</span><br><span class="line">    // 使用 param1,param2...paramN 的业务逻辑</span><br><span class="line">    // p1 对应 param1, p2 对应 param2, PN 对应 paramN</span><br><span class="line">&#125;)([param1,param2...paramN]);</span><br></pre></td></tr></table></figure><p>在 JavaScript 中 <code>();</code> 表示执行, 写成  <code>(function(){});</code> 也可以执行, 写成 <code>(function(){})();</code> 也可以执行,<br>如果在第二个小括号中传入参数就相当于给第一个小括号中的函数传入对应的参数.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html" target="_blank" rel="noopener">闭包，懂不懂由你，反正我是懂了</a></li><li><a href="https://stackoverflow.com/questions/111102/how-do-javascript-closures-work" target="_blank" rel="noopener">How do JavaScript closures work?</a></li></ul>]]></content>
    
    <summary type="html">
    
      JavaScript 中对闭包和匿名函数的理解
    
    </summary>
    
      <category term="JavaScript" scheme="http://ckjava.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://ckjava.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 知识点积累</title>
    <link href="http://ckjava.com/2017/09/15/AngularJS-basic/"/>
    <id>http://ckjava.com/2017/09/15/AngularJS-basic/</id>
    <published>2017-09-14T16:00:00.000Z</published>
    <updated>2018-01-01T12:55:41.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何动态插入删除dom节点"><a href="#如何动态插入删除dom节点" class="headerlink" title="如何动态插入删除dom节点"></a><a href="http://yijiebuyi.com/blog/7702aba213aec9de43b129b3d2f3b30c.html" target="_blank" rel="noopener">如何动态插入删除dom节点</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;div[name=father]&apos;).html(</span><br><span class="line">  $compile(&apos;&lt;input type=&quot;text&quot; ng-model=&quot;person.name&quot; /&gt; &lt;input type=&quot;input&quot; ng-model=&quot;person.age&quot; value=&quot;&#123;&#123;person.age&#125;&#125;&quot; /&gt;&lt;a ng-show=&quot;$index!=0&quot; style=&quot;color:red;&quot; ng-click=&quot;del($index)&quot;&gt;移除&lt;/a&gt;&apos;</span><br><span class="line">  )($scope)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.angularjs.org/guide/compiler" target="_blank" rel="noopener">HTML Compiler</a></li></ul><h2 id="ng-click-如何获取触发事件对象或者this"><a href="#ng-click-如何获取触发事件对象或者this" class="headerlink" title="ng-click 如何获取触发事件对象或者this"></a><a href="http://blog.csdn.net/a576736858/article/details/62039286" target="_blank" rel="noopener">ng-click 如何获取触发事件对象或者this</a></h2><p><code>ng-click=&quot;addPackage($event,111)&quot;</code> 传递一个$event对象<br>通过事件对象 <code>$event.target</code>  获取事件源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//动态添加数据  </span><br><span class="line">$scope.addPackage = function(myevent,deviceType)&#123;  </span><br><span class="line">    //获取item对象  </span><br><span class="line">    var htmlObj = $(myevent.target).closest(&quot;.float_left&quot;);  </span><br><span class="line">    var deviceName = htmlObj.find(&quot;div.font_16&quot;).html();  </span><br><span class="line">    var jsonObj = &#123;  </span><br><span class="line">        &quot;deviceType&quot;:deviceType,//设备类型，唯一标识，用于判断是否已经添加  </span><br><span class="line">        &quot;deviceName&quot;:deviceName //设备的名称  </span><br><span class="line">    &#125;;  </span><br><span class="line">    //判断数据是否已经选中了  </span><br><span class="line">    if(!this.hasDevice(deviceType))&#123;  </span><br><span class="line">        //给$scope.lists添加数据  </span><br><span class="line">        this.lists.push(jsonObj);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="如何在页面加载的时候执行一个方法"><a href="#如何在页面加载的时候执行一个方法" class="headerlink" title="如何在页面加载的时候执行一个方法"></a><a href="https://stackoverflow.com/questions/15458609/how-to-execute-angular-controller-function-on-page-load" target="_blank" rel="noopener">如何在页面加载的时候执行一个方法</a></h2><p>使用 <a href="https://docs.angularjs.org/api/ng/directive/ngInit" target="_blank" rel="noopener"><code>ng-init</code></a> 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// register controller in html</span><br><span class="line">&lt;div data-ng-controller=&quot;myCtrl&quot; data-ng-init=&quot;init()&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// in controller</span><br><span class="line">$scope.init = function () &#123;</span><br><span class="line">    // check if there is query in url</span><br><span class="line">    // and fire search in case its value is not empty</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用-ng-repeat-来实现增加一行-删除一行的效果"><a href="#使用-ng-repeat-来实现增加一行-删除一行的效果" class="headerlink" title="使用 ng-repeat 来实现增加一行/删除一行的效果"></a><a href="http://lib.csdn.net/article/angularjs/33158" target="_blank" rel="noopener">使用 <code>ng-repeat</code> 来实现增加一行/删除一行的效果</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$scope.printInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; $scope.showVBs.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log($scope.showVBs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">$scope.showVBs = [&#123;</span><br><span class="line">    <span class="string">"Tag"</span>: <span class="string">"Tag1"</span>,</span><br><span class="line">    <span class="string">"NO"</span>: <span class="string">"No1"</span>,</span><br><span class="line">    <span class="string">"remarks"</span>: <span class="string">"remarks1"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">"Tag"</span>: <span class="string">"Tag2"</span>,</span><br><span class="line">    <span class="string">"NO"</span>: <span class="string">"No2"</span>,</span><br><span class="line">    <span class="string">"remarks"</span>: <span class="string">"remarks2"</span></span><br><span class="line">&#125;];</span><br><span class="line">$scope.BDetailsAdd = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.showVBs.push(&#123;&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">$scope.BDetailsDel = <span class="function"><span class="keyword">function</span> (<span class="params">Count</span>) </span>&#123;</span><br><span class="line">    $scope.showVBs.splice(Count, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">name</span>=<span class="string">"editForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row  panel panel-default panel-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-offset-1 panel panel-default"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;'Details'&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">ng-click</span>=<span class="string">"BDetailsAdd()"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">value</span>=<span class="string">"打印信息"</span> <span class="attr">ng-click</span>=<span class="string">"printInfo()"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vBaggages"</span> <span class="attr">ng-repeat</span>=<span class="string">"vba in showVBs"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group col-md-2 col-md-offset-1"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">value</span>=<span class="string">"删"</span> <span class="attr">ng-click</span>=<span class="string">"BDetailsDel($index)"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control pull-right"</span> <span class="attr">ng-model</span>=<span class="string">"vba.Tag"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">placeholder</span>=<span class="string">"Tag"</span> <span class="attr">style</span>=<span class="string">"width:70%"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group col-md-2 col-md-offset-1"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control pull-right"</span> <span class="attr">ng-model</span>=<span class="string">"vba.NO"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">placeholder</span>=<span class="string">"No."</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group col-md-5 col-md-offset-1"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control pull-right"</span> <span class="attr">ng-model</span>=<span class="string">"vba.remarks"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">placeholder</span>=<span class="string">"Remarks"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何构建一个-SpringBoot-angularJS-web-应用"><a href="#如何构建一个-SpringBoot-angularJS-web-应用" class="headerlink" title="如何构建一个 SpringBoot + angularJS web 应用"></a><a href="http://websystique.com/spring-boot/spring-boot-angularjs-spring-data-jpa-crud-app-example/" target="_blank" rel="noopener">如何构建一个 SpringBoot + angularJS web 应用</a></h2><h2 id="如何安装-AngularJS-的-ngStorage-模块"><a href="#如何安装-AngularJS-的-ngStorage-模块" class="headerlink" title="如何安装 AngularJS 的 ngStorage 模块"></a><a href="http://blog.legacyteam.info/2014/12/ngstorage-localstorage-module-for-angularjs/" target="_blank" rel="noopener">如何安装 AngularJS 的 ngStorage 模块</a></h2><p>错误提示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: [$injector:modulerr] Failed to instantiate module ngStorage due to:</span><br><span class="line">Error: [$injector:nomod] Module &apos;ngStorage&apos; is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.</span><br></pre></td></tr></table></figure><p>解决方法如下</p><p>在项目根目录下执行安装(uninstall 是卸载)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install ngstorage</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bower ngstorage#*               cached https://github.com/gsklee/ngStorage.git#0.3.11</span><br><span class="line">bower ngstorage#*             validate 0.3.11 against https://github.com/gsklee/ngStorage.git#*</span><br><span class="line">bower ngstorage#^0.3.11        install ngstorage#0.3.11</span><br><span class="line"></span><br><span class="line">ngstorage#0.3.11 bower_components\ngstorage</span><br><span class="line">└── angular#1.5.11</span><br></pre></td></tr></table></figure><p>然后在项目中的 bower.json 文件中添加相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;ng-js-tree&quot;: &quot;~0.0.7&quot;,</span><br><span class="line">    &quot;angular-ui-select&quot;: &quot;^0.19.6&quot;,</span><br><span class="line">    &quot;ngstorage&quot;: &quot;0.3.11&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="AngularJS-如何跨域访问-SpringBoot-API"><a href="#AngularJS-如何跨域访问-SpringBoot-API" class="headerlink" title="AngularJS 如何跨域访问 SpringBoot API"></a><a href="https://stackoverflow.com/questions/19825946/how-to-add-a-filter-class-in-spring-boot" target="_blank" rel="noopener">AngularJS 如何跨域访问 SpringBoot API</a></h2><p>错误描述如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://localhost:8011/api/task_main. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:3000&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure><p>解决方法</p><p>添加一个 Filter 配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ctrip.payment.filter.RemoteAccessFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">someFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registration.setFilter(remoteAccessFilter());</span><br><span class="line">    registration.addUrlPatterns(<span class="string">"/api/*"</span>);</span><br><span class="line">    <span class="comment">//registration.addInitParameter("paramName", "paramValue");</span></span><br><span class="line">    registration.setName(<span class="string">"remoteAccessFilter"</span>);</span><br><span class="line">    registration.setOrder(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Filter <span class="title">remoteAccessFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RemoteAccessFilter();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体 Filter 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteAccessFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ref:http://www.cnblogs.com/1000px/p/4666247.html</span></span><br><span class="line">HttpServletResponse resp = (HttpServletResponse) response;</span><br><span class="line">resp.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">resp.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,POST,PUT"</span>);</span><br><span class="line">resp.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Accept,x-requested-with,content-type"</span>);</span><br><span class="line"></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.cnblogs.com/1000px/p/4666247.html" target="_blank" rel="noopener">AngularJS跨域请求</a></li></ul><h2 id="AngularJS-如何判断字符串或者对象是否为空"><a href="#AngularJS-如何判断字符串或者对象是否为空" class="headerlink" title="AngularJS 如何判断字符串或者对象是否为空"></a>AngularJS 如何判断字符串或者对象是否为空</h2><p>在 AngularJs 中判断对象是否为空，可以使用 angular.equals，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (obj == null || angular.equals(&#123;&#125;, obj)) &#123;</span><br><span class="line"> // 为空</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是一个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (obj == null || angular.equals(&apos;&apos;, obj.trim())) &#123;</span><br><span class="line"> // 为空</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-datePicker-和-timePicker-的组合使用"><a href="#关于-datePicker-和-timePicker-的组合使用" class="headerlink" title="关于 datePicker 和 timePicker 的组合使用"></a><a href="https://angular-ui.github.io/bootstrap/" target="_blank" rel="noopener">关于 datePicker 和 timePicker 的组合使用</a></h2><ul><li>html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row datepicker&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class="line">   &lt;label&gt;开始时间&lt;/label&gt;</span><br><span class="line">   &lt;p class=&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; readonly class=&quot;form-control&quot; uib-datepicker-popup=&quot;yyyy-MM-dd&quot; datepicker-options=&quot;datePickerOptions&quot; ng-model=&quot;clogDateTime.clogFromDate&quot; is-open=&quot;fromDateStatus.isOpen&quot; close-text=&quot;Close&quot; /&gt;</span><br><span class="line">  &lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-click=&quot;fromDateOpen()&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">   &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class="line">   &lt;uib-timepicker show-seconds=&quot;true&quot; ng-change=&quot;clogFromTimeChanged()&quot; ng-model=&quot;clogDateTime.clogFromTime&quot; show-meridian=&quot;false&quot;&gt;&lt;/uib-timepicker&gt; &#123;&#123; (clogDateTime.clogFromDate != null &amp;&amp; clogDateTime.clogFromTime != null) ? (taskSubInfo.fromDate = (clogDateTime.clogFromDate | date:&apos;yyyy-MM-dd&apos;)  + &apos; &apos; + (clogDateTime.clogFromTime | date:&apos;HH:mm:ss&apos;)) : null &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class="line">   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-danger&quot; ng-click=&quot;resetFromDateTime()&quot;&gt;重置开始时间&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class="line">   &lt;label&gt;结束时间&lt;/label&gt;</span><br><span class="line">   &lt;p class=&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; readonly class=&quot;form-control&quot; uib-datepicker-popup=&quot;yyyy-MM-dd&quot; datepicker-options=&quot;datePickerOptions&quot; ng-model=&quot;clogDateTime.clogToDate&quot; is-open=&quot;toDateStatus.isOpen&quot; close-text=&quot;Close&quot; /&gt;</span><br><span class="line">  &lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-click=&quot;toDateOpen()&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">   &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class="line">   &lt;uib-timepicker show-seconds=&quot;true&quot; ng-change=&quot;clogToTimeChanged()&quot; ng-model=&quot;clogDateTime.clogToTime&quot; show-meridian=&quot;false&quot;&gt;&lt;/uib-timepicker&gt; &#123;&#123; (clogDateTime.clogToDate != null &amp;&amp; clogDateTime.clogToTime != null) ? (taskSubInfo.toDate = (clogDateTime.clogToDate | date:&apos;yyyy-MM-dd&apos;)  + &apos; &apos; + (clogDateTime.clogToTime | date:&apos;HH:mm:ss&apos;)) : null &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class="line">   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-danger&quot; ng-click=&quot;resetToDateTime()&quot;&gt;重置结束时间&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// 将日期和时间作为对象进行考虑</span><br><span class="line">$scope.clogDateTime = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">$scope.resetFromDateTime = function () &#123;</span><br><span class="line">  $scope.clogDateTime.clogFromDate = null;</span><br><span class="line">  $scope.clogDateTime.clogFromTime = null;</span><br><span class="line">  $scope.taskSubInfo.fromDate = null;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$scope.resetToDateTime = function () &#123;</span><br><span class="line">  $scope.clogDateTime.clogToDate = null;</span><br><span class="line">  $scope.clogDateTime.clogToTime = null;</span><br><span class="line">  $scope.taskSubInfo.toDate = null;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">// 提交的时候</span><br><span class="line">if ($scope.taskSubInfo.fromDate == null || angular.equals($scope.taskSubInfo.fromDate.trim(), &apos;&apos;)) &#123;</span><br><span class="line">  $scope.taskSubInfo.fromDate = null;</span><br><span class="line">&#125;</span><br><span class="line">if ($scope.taskSubInfo.toDate == null || angular.equals($scope.taskSubInfo.toDate.trim(), &apos;&apos;)) &#123;</span><br><span class="line">  $scope.taskSubInfo.toDate = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加载的时候  </span><br><span class="line">var dateTimeReg = /^(?:19|20)[0-9][0-9]-(?:(?:0[1-9])|(?:1[0-2]))-(?:(?:[0-2][1-9])|(?:[1-3][0-1])) (?:(?:[0-2][0-3])|(?:[0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/;</span><br><span class="line"></span><br><span class="line">if ($scope.taskSubInfo.fromDate != null</span><br><span class="line">  &amp;&amp; !angular.equals($scope.taskSubInfo.fromDate.trim(), &apos;&apos;)</span><br><span class="line">  &amp;&amp; dateTimeReg.test($scope.taskSubInfo.fromDate)) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">  $scope.clogDateTime.clogFromDate = new Date($scope.taskSubInfo.fromDate);</span><br><span class="line">  $scope.clogDateTime.clogFromTime = new Date($scope.taskSubInfo.fromDate);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">  console.log(&apos;invalid fromDate:&apos;+$scope.taskSubInfo.fromDate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if ($scope.taskSubInfo.toDate != null</span><br><span class="line">  &amp;&amp; !angular.equals($scope.taskSubInfo.toDate.trim(), &apos;&apos;)</span><br><span class="line">  &amp;&amp; dateTimeReg.test($scope.taskSubInfo.toDate)) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">  $scope.clogDateTime.clogToDate = new Date($scope.taskSubInfo.toDate);</span><br><span class="line">  $scope.clogDateTime.clogToTime = new Date($scope.taskSubInfo.toDate);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">  console.log(&apos;invalid fromDate:&apos;+$scope.taskSubInfo.fromDate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*$scope.clogFromDate = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.fromDate),&apos;yyyy-MM-dd&apos;));</span><br><span class="line">$scope.clogToDate = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.toDate),&apos;yyyy-MM-dd&apos;));</span><br><span class="line">$scope.clogFromTime = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.fromDate),&apos;HH:mm:ss&apos;));</span><br><span class="line">$scope.clogToTime = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.toDate),&apos;HH:mm:ss&apos;));*/</span><br></pre></td></tr></table></figure><h2 id="如何在-ngRepeat-中设置-name-属性的-index"><a href="#如何在-ngRepeat-中设置-name-属性的-index" class="headerlink" title="如何在 ngRepeat 中设置 name 属性的 $index"></a>如何在 ngRepeat 中设置 name 属性的 $index</h2><p>具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group&quot;</span><br><span class="line">     ng-class=&quot;&#123;&apos;has-error&apos;: taskSubForm[&apos;variableName_&apos;+$index].$invalid &amp;&amp; (taskSubForm[&apos;variableName_&apos;+$index].$dirty || taskSubForm.$submitted)&#125;&quot;&gt;</span><br><span class="line">    &lt;label&gt;变量名称&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;variableName_&#123;&#123;$index&#125;&#125;&quot; placeholder=&quot;变量名称 必填&quot; ng-model=&quot;taskSubvariable.variableName&quot; required&gt;</span><br><span class="line">    &lt;span class=&quot;help-block error-block basic-block&quot;&gt;此字段必填&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><a href="https://stackoverflow.com/questions/21631456/angular-ngrepeat-index-in-name-attribute" target="_blank" rel="noopener">angular ngRepeat $index in name attribute</a></li></ul><h2 id="如何知道-http-请求成功了"><a href="#如何知道-http-请求成功了" class="headerlink" title="如何知道 $http 请求成功了"></a><a href="http://www.cnblogs.com/xing901022/p/4928147.html" target="_blank" rel="noopener">如何知道 $http 请求成功了</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">     var myAppModule = angular.module(&quot;myApp&quot;,[]);</span><br><span class="line">     myAppModule.controller(&quot;myctrl&quot;,[&quot;$scope&quot;,&quot;$q&quot;,function($scope, $ q )&#123;</span><br><span class="line">        $scope.test = 1;//这个只是用来测试angularjs是否正常的，没其他的作用</span><br><span class="line"></span><br><span class="line">        var defer1 = $q.defer();</span><br><span class="line">        var promise1 = defer1.promise;</span><br><span class="line"></span><br><span class="line">        promise1</span><br><span class="line">        .then(function(value)&#123;</span><br><span class="line">            console.log(&quot;in promise1 ---- success&quot;);</span><br><span class="line">            console.log(value);</span><br><span class="line">        &#125;,function(value)&#123;</span><br><span class="line">            console.log(&quot;in promise1 ---- error&quot;);</span><br><span class="line">            console.log(value);</span><br><span class="line">        &#125;,function(value)&#123;</span><br><span class="line">            console.log(&quot;in promise1 ---- notify&quot;);</span><br><span class="line">            console.log(value);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(function(e)&#123;</span><br><span class="line">            console.log(&quot;in promise1 ---- catch&quot;);</span><br><span class="line">            console.log(e);</span><br><span class="line">        &#125;)</span><br><span class="line">        .finally(function(value)&#123;</span><br><span class="line">            console.log(&apos;in promise1 ---- finally&apos;);</span><br><span class="line">            console.log(value);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        defer1.resolve(&quot;hello&quot;);</span><br><span class="line">        // defer1.reject(&quot;sorry,reject&quot;);</span><br><span class="line">     &#125;]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>也可以简写成如下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">promise1</span><br><span class="line">.then(function(value)&#123;</span><br><span class="line">    console.log(&quot;in promise1 ---- success&quot;);</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;,function(value)&#123;</span><br><span class="line">    console.log(&quot;in promise1 ---- error&quot;);</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise1</span><br><span class="line">.then(function(value)&#123;</span><br><span class="line">    console.log(&quot;in promise1 ---- success&quot;);</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.cnblogs.com/xing901022/p/4928147.html" target="_blank" rel="noopener">AngularJS 中的Promise — $q服务详解</a></li></ul><h2 id="Modal-弹出框如何传值"><a href="#Modal-弹出框如何传值" class="headerlink" title="Modal 弹出框如何传值"></a><a href="http://www.cnblogs.com/acmilan/p/3672184.html" target="_blank" rel="noopener">Modal 弹出框如何传值</a></h2><ul><li>通过 resolve</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;modaltest&apos;)</span><br><span class="line">.controller(&apos;testModalTestController&apos;,function($scope,$modal)&#123;</span><br><span class="line">        $scope.addModal = function () &#123;</span><br><span class="line">            var newWarn = $modal.open(&#123;</span><br><span class="line">                templateUrl: &apos;views/part/add.html&apos;,</span><br><span class="line">                controller: &apos;C_add_Warn&apos;,</span><br><span class="line">                resolve:&#123;</span><br><span class="line">                    header : function() &#123; return angular.copy(&quot;新增&quot;); &#125;,</span><br><span class="line">                    msg : function() &#123; return angular.copy(&quot;这是消息&quot;); &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;) </span><br><span class="line">.controller(&apos;C_add_Warn&apos;,function($scope,header,msg)&#123;</span><br><span class="line">       $scope.header = header;</span><br><span class="line">       $scope.msg = msg;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过 scope 传递</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;modaltest&apos;)</span><br><span class="line"> .controller(&apos;testModalTestController&apos;,function($rootScope,$scope,$modal)&#123;</span><br><span class="line">          var scope = $rootScope.$new();</span><br><span class="line">           scope.data = &#123;</span><br><span class="line">                msg:&quot;test&quot;,</span><br><span class="line">                header:&quot;header&quot;</span><br><span class="line">           &#125;</span><br><span class="line">          $scope.addModal = function () &#123;</span><br><span class="line">              var newWarn = $modal.open(&#123;</span><br><span class="line">                  templateUrl: &apos;views/part/add.html&apos;,</span><br><span class="line">                  controller: &apos;C_add_Warn&apos;,</span><br><span class="line">                  scope:scope</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125;  </span><br><span class="line"> &#125;) </span><br><span class="line"> .controller(&apos;C_add_Warn&apos;,function($scope)&#123;</span><br><span class="line">        var data = $scope.data;</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="Controller-之间如何跳转"><a href="#Controller-之间如何跳转" class="headerlink" title="Controller 之间如何跳转"></a><a href="https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/" target="_blank" rel="noopener">Controller 之间如何跳转</a></h2><ul><li>在AngularJS的app.js中用ui-router定义路由，比如现在有两个页面，一个页面producers.html放置了多个producers，点击其中一个目标，页面跳转到对应的producer.html页，同时将producerId这个参数传过去。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//定义producers状态</span><br><span class="line">.state(&apos;producers&apos;, &#123;</span><br><span class="line">    url: &apos;/producers&apos;,</span><br><span class="line">    templateUrl: &apos;views/producers.html&apos;,</span><br><span class="line">    controller: &apos;ProducersCtrl&apos;</span><br><span class="line">&#125;)</span><br><span class="line">//定义producer状态</span><br><span class="line">.state(&apos;producer&apos;, &#123;</span><br><span class="line">    url: &apos;/producer/:producerId&apos;,</span><br><span class="line">    templateUrl: &apos;views/producer.html&apos;,</span><br><span class="line">    controller: &apos;ProducerCtrl&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在producers.html中，定义点击事件，比如ng-click=”toProducer(producerId)”，在ProducersCtrl中，定义页面跳转函数 (使用ui-router的$state.go接口)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.controller(&apos;ProducersCtrl&apos;, function ($scope, $state) &#123;</span><br><span class="line">    $scope.toProducer = function (producerId) &#123;</span><br><span class="line">        $state.go(&apos;producer&apos;, &#123;producerId: producerId&#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在 ProducerCtrl 中，通过 ui-router 的 $stateParams 获取参数 producerId，譬如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> .controller(&apos;ProducerCtrl&apos;, function ($scope, $state, $stateParams) &#123;</span><br><span class="line">   var producerId = $stateParams.producerId;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/" target="_blank" rel="noopener">AngularJS - 页面跳转传参</a></li></ul><h2 id="如何截取字符串-filter的使用介绍"><a href="#如何截取字符串-filter的使用介绍" class="headerlink" title="如何截取字符串(filter的使用介绍)"></a><a href="https://stackoverflow.com/questions/18095727/limit-the-length-of-a-string-with-angularjs" target="_blank" rel="noopener">如何截取字符串(filter的使用介绍)</a></h2><p>在模块中定义 cut filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;ng&apos;).filter(&apos;cut&apos;, function () &#123;</span><br><span class="line">        return function (value, wordwise, max, tail) &#123;</span><br><span class="line">            if (!value) return &apos;&apos;;</span><br><span class="line"></span><br><span class="line">            max = parseInt(max, 10);</span><br><span class="line">            if (!max) return value;</span><br><span class="line">            if (value.length &lt;= max) return value;</span><br><span class="line"></span><br><span class="line">            value = value.substr(0, max);</span><br><span class="line">            if (wordwise) &#123;</span><br><span class="line">                var lastspace = value.lastIndexOf(&apos; &apos;);</span><br><span class="line">                if (lastspace !== -1) &#123;</span><br><span class="line">                  //Also remove . and , so its gives a cleaner result.</span><br><span class="line">                  if (value.charAt(lastspace-1) === &apos;.&apos; || value.charAt(lastspace-1) === &apos;,&apos;) &#123;</span><br><span class="line">                    lastspace = lastspace - 1;</span><br><span class="line">                  &#125;</span><br><span class="line">                  value = value.substr(0, lastspace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return value + (tail || &apos; …&apos;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>使用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;some_text | cut:true:100:&apos; ...&apos;&#125;&#125;</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li>wordwise (boolean) - if true, cut only by words bounds,</li><li>max (integer) - max length of the text, cut to this number of chars,</li><li>tail (string, default: ‘ …’) - add this string to the input string if the string was cut.</li></ul><h2 id="checkbox-中的-ng-model-不起作用了"><a href="#checkbox-中的-ng-model-不起作用了" class="headerlink" title="checkbox 中的 ng-model 不起作用了"></a><a href="https://stackoverflow.com/questions/18642371/checkbox-not-binding-to-scope-in-angularjs" target="_blank" rel="noopener">checkbox 中的 ng-model 不起作用了</a></h2><p>先看看下面错误的做法</p><ul><li>html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label class=&quot;checkbox-inline custom-checkbox nowrap&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; ng-model=&quot;checkJobAll&quot; ng-click=&quot;checkAllJob(checkJobAll)&quot;&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$scope.checkJobAll = false;</span><br><span class="line"></span><br><span class="line">$scope.checkJobAll = true;</span><br></pre></td></tr></table></figure><p>当 ng-model 绑定的是一个普通变量的时候, Controller 中的变量无法和页面上的变量值同步,只有改成对象的形式才可以,正确的做法如下</p><ul><li>html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label class=&quot;checkbox-inline custom-checkbox nowrap&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; ng-model=&quot;checkJobAll.flag&quot; ng-click=&quot;checkAllJob(checkJobAll.flag)&quot;&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$scope.checkJobAll = &#123; &apos;flag&apos;:false &#125;;</span><br><span class="line"></span><br><span class="line">$scope.checkJobAll.flag = true;</span><br></pre></td></tr></table></figure><h2 id="Modal-弹出框如何使用"><a href="#Modal-弹出框如何使用" class="headerlink" title="Modal 弹出框如何使用"></a><a href="https://angular-ui.github.io/bootstrap/#!#modal" target="_blank" rel="noopener">Modal 弹出框如何使用</a></h2><p>点击页面上的按钮弹出一个 Modal 对话框</p><ul><li>html </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot; ng-disabled=&quot;(item.status == &apos;EXECUTING&apos; ? false : true) || showLoading&quot; ng-click=&quot;openStopModal(&apos;app/pages/job/modal/stopJobModal.html&apos;, &apos;md&apos;, item.id)&quot; class=&quot;btn btn-danger btn-sm&quot; value=&quot;停止&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开停止job的对话框</span></span><br><span class="line">$scope.openStopModal = <span class="function"><span class="keyword">function</span> (<span class="params">page, size, id</span>) </span>&#123;</span><br><span class="line">    $scope.showLoading = <span class="literal">true</span>;</span><br><span class="line">    $scope.stopJobExecuteId = id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹出是否关闭job的对话框 ///////////////////////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="keyword">var</span> modalInstance = $uibModal.open(&#123;</span><br><span class="line">        animation: <span class="literal">true</span>,</span><br><span class="line">        templateUrl: page,</span><br><span class="line">        scope: $scope,</span><br><span class="line">        <span class="comment">//controller: 'StopJobModalInstanceCtrl',</span></span><br><span class="line">        size: size</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    modalInstance.result.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// close</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'modal close'</span>);</span><br><span class="line">        $scope.showLoading = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后台调用 stopJob 服务</span></span><br><span class="line">        JobExecuteService.stopJob($scope.stopJobExecuteId).then( <span class="comment">// 点击确定关闭job 按钮的回调</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">" stopJobExecute response = "</span>  + <span class="built_in">JSON</span>.stringify(response));</span><br><span class="line"></span><br><span class="line">                $scope.stopJobDetail = response.data.stopDetail;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 关闭job成功后的modal //////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">                <span class="keyword">var</span> successModalInstance = $uibModal.open(&#123;</span><br><span class="line">                    animation: <span class="literal">true</span>,</span><br><span class="line">                    templateUrl: <span class="string">'app/pages/job/modal/stopJobSuccessModal.html'</span>,</span><br><span class="line">                    scope: $scope, <span class="comment">// 控制弹出的 Modal 框使用同样的 $scope</span></span><br><span class="line">                    size: <span class="string">'md'</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                successModalInstance.result.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// close</span></span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// dismiss或者Modal框消失</span></span><br><span class="line">                    <span class="comment">// 刷新列表数据</span></span><br><span class="line">                    $scope.callServer($scope.jobExecuteTableState);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">errResponse</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">'Error while getJobExecute '</span> + id + <span class="string">', Error :'</span> + errResponse.data);</span><br><span class="line">                toastr.error(<span class="string">'Error while getJobExecute '</span> + id + <span class="string">', Error :'</span> + errResponse.data, <span class="string">'提示'</span>, $scope.notificationConfig);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// dismiss</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'modal dismiss'</span>);</span><br><span class="line">        $scope.showLoading = <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于-form-的使用-涉及-submitted-和-setPristine-应用"><a href="#关于-form-的使用-涉及-submitted-和-setPristine-应用" class="headerlink" title="关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 "></a><a href="https://code.angularjs.org/1.5.8/docs/api/ng/directive/form" target="_blank" rel="noopener">关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 </a></h2><ul><li>html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ba-panel</span><br><span class="line">     ba-panel-class=&quot;with-scroll&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form name=&quot;taskMainForm&quot; ng-submit=&quot;submit()&quot; ng-init=&quot;initForm()&quot; novalidate&gt;</span><br><span class="line">        &lt;div class=&quot;form-group has-feedback&quot;</span><br><span class="line">             ng-class=&quot;&#123;&apos;has-error&apos;: taskMainForm.taskName.$invalid &amp;&amp; (taskMainForm.taskName.$dirty || taskMainForm.$submitted)&#125;&quot;&gt;</span><br><span class="line">            &lt;label&gt;任务名称&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;taskName&quot; placeholder=&quot;任务名称 必填&quot; ng-model=&quot;taskMainInfo.taskName&quot; required&gt;</span><br><span class="line">            &lt;span class=&quot;help-block error-block basic-block&quot;&gt;必填&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">            &lt;label&gt;备注&lt;/label&gt;</span><br><span class="line">            &lt;textarea placeholder=&quot;填写备注&quot; class=&quot;form-control&quot; ng-model=&quot;taskMainInfo.remarks&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; ng-disabled=&quot;taskMainForm.$submitted &amp;&amp; submitFlag&quot; value=&quot;&#123;&#123;!taskMainInfo.id ? &apos;添加&apos; : &apos;修改&apos;&#125;&#125;&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;</span><br><span class="line">            &lt;button type=&quot;button&quot; ng-click=&quot;initForm(taskMainForm)&quot; class=&quot;btn btn-warning btn-sm&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重置form</span></span><br><span class="line">$scope.initForm = <span class="function"><span class="keyword">function</span> (<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (form != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> form !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      form.$setPristine();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.taskMainInfo = &#123;&#125;;</span><br><span class="line">  $scope.taskSubs = [];</span><br><span class="line">  $scope.deleteTaskSubs = [];</span><br><span class="line">  $scope.taskMainInfo.executeType = <span class="string">'0'</span>;</span><br><span class="line">  $scope.taskMainInfo.taskStatus = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">  $scope.taskSubAdd();</span><br><span class="line">  <span class="comment">// 2 所有, 用于创建主任务模块</span></span><br><span class="line">  $scope.loadAllTaskSubDict($scope.loadTaskSubFlag);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'init form success'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$scope.taskMainForm = &#123;&#125;</span><br><span class="line"></span><br><span class="line">$scope.submitFlag = true;</span><br><span class="line">$scope.submit = function() &#123;</span><br><span class="line">      $scope.submitFlag = true;</span><br><span class="line">      if (this.taskMainForm.$invalid) &#123; // this.taskMainForm 表示当前操作的form</span><br><span class="line">          $scope.submitFlag = false;</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $scope.taskMainForm = this.taskMainForm; // 把当前 form 作为全局的 form 来看</span><br><span class="line"></span><br><span class="line">      // 保存成功</span><br><span class="line">      if (createSuccess) &#123;</span><br><span class="line">        $scope.initForm($scope.taskMainForm);    </span><br><span class="line">      &#125;</span><br><span class="line">      // 修改成功</span><br><span class="line">      if (updateSuccess) &#123;</span><br><span class="line">        $scope.initForm($scope.taskMainForm);    </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>在 form submit 后 $submitted 会变成 true 并禁用 submit 按钮, 然后再调用上面的 initForm 方法来将 $submitted 状态重置为 false.</p><p>关键在于点击提交按钮后通过 ng-submit 中定义的 submit 函数中的 <code>this.taskMainForm</code> 来获取到当前的 form 对象, 在保存或者修改成功后再调用 <code>form.$setPristine()</code> 将 $submitted 状态重置为 false.</p><ul><li>参考 <a href="https://stackoverflow.com/questions/32029889/angular-setpristine-not-working" target="_blank" rel="noopener">Angular $setPristine() not working</a></li></ul><h2 id="如何给一组-CheckBox-绑定值"><a href="#如何给一组-CheckBox-绑定值" class="headerlink" title="如何给一组 CheckBox 绑定值"></a><a href="https://stackoverflow.com/questions/14514461/how-do-i-bind-to-list-of-checkbox-values-with-angularjs" target="_blank" rel="noopener">如何给一组 CheckBox 绑定值</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-controller=&quot;MainCtrl&quot;&gt;</span><br><span class="line">  &lt;label ng-repeat=&quot;(color,enabled) in colors&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; ng-model=&quot;colors[color]&quot; /&gt; &#123;&#123;color&#125;&#125; </span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;p&gt;colors: &#123;&#123;colors&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var app = angular.module(&apos;plunker&apos;, []);</span><br><span class="line"></span><br><span class="line">  app.controller(&apos;MainCtrl&apos;, function($scope) &#123;</span><br><span class="line">      $scope.colors = &#123;Blue: true, Orange: true&#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      AngularJS 知识点积累
    
    </summary>
    
      <category term="AngularJS" scheme="http://ckjava.com/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://ckjava.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>对循环冗余校验码CRC的理解</title>
    <link href="http://ckjava.com/2017/09/11/understand-crc/"/>
    <id>http://ckjava.com/2017/09/11/understand-crc/</id>
    <published>2017-09-10T16:00:00.000Z</published>
    <updated>2018-01-01T12:55:41.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模2加法"><a href="#模2加法" class="headerlink" title="模2加法"></a>模2加法</h2><p>1+1=0, 0+1=1, 1+0=1, 0+0=0</p><h2 id="模2减法"><a href="#模2减法" class="headerlink" title="模2减法"></a>模2减法</h2><p>1-1=0, 0-1=1, 1-0=1, 0-0=0</p><p>相当于二进制中的逻辑异或运算。也就是比较后两者对应位相同则结果为“0”，不同则结果为“1”.</p><h2 id="模2除法"><a href="#模2除法" class="headerlink" title="模2除法"></a>模2除法</h2><p>基于模2减法.</p><h2 id="模2乘法"><a href="#模2乘法" class="headerlink" title="模2乘法"></a>模2乘法</h2><p>基于模2加法</p><h2 id="模运算举例"><a href="#模运算举例" class="headerlink" title="模运算举例"></a>模运算举例</h2><p><img src="http://7xt8a6.com1.z0.glb.clouddn.com/crc-1.jpg" alt="crc-1"></p><h2 id="CRC校验码的位数"><a href="#CRC校验码的位数" class="headerlink" title="CRC校验码的位数"></a>CRC校验码的位数</h2><blockquote><p>余数的位数一定要是比除数位数只能少一位，哪怕前面位是0，甚至是全为0（附带好整除时）</p></blockquote><p>余数 是指 CRC校验码<br>除数 是指 生成多项式转成的二进制位<br>生成多项式位数 = CRC校验码位数 + 1</p><h2 id="将多项式转成二进制位"><a href="#将多项式转成二进制位" class="headerlink" title="将多项式转成二进制位"></a>将多项式转成二进制位</h2><p>由<code>G（X）= X4 + X3 + 1</code>可以知道，它一共是5位（总位数等于最高位的幂次加1，即4+1=5），然后根据多项式各项的含义（多项式只列出二进制值为1的位，也就是这个二进制的第4位、第3位、第0位的二进制均为1，其它位均为0）很快就可得到它的二进制比特串为11001。</p><p><code>g（x）= x16 + x15 + x2 +1</code> 对应二进制比特串为：11000000000000101<br><code>g（x）= x16 + x15 + x5 +1</code> 对应二进制比特串为：11000000000100001</p><p><strong>按照国际上通行的标准, 多项式转成二进制位后最高位和最低位必须均为“1”.</strong></p><h2 id="生成多项式"><a href="#生成多项式" class="headerlink" title="生成多项式"></a>生成多项式</h2><p>用于在接收端进行校验时，对接收的帧进行除法运算的<strong>除数</strong>,通常是以多项方式表示.</p><h2 id="CRC校验码"><a href="#CRC校验码" class="headerlink" title="CRC校验码"></a>CRC校验码</h2><p>所选定的除数二进制位数（假设为k位），然后在要发送的数据帧（假设为m位）后面加上k-1位“0”，然后以这个加了k-1个“0“的新帧（一共是m+k-1位）以“模2除法”方式除以上面这个除数，所得到的余数（也是二进制的比特串）就是该帧的CRC校验码.</p><h2 id="接收端处理"><a href="#接收端处理" class="headerlink" title="接收端处理"></a>接收端处理</h2><p>将校验码(上面的余数)附加在原数据帧（就是m位的帧）后面，构建一个新帧发送到接收端；最后在接收端再把这个新帧以“模2除法”方式除以前面选择的除数(上面的生成多项式转成的二进制位)，如果没有余数，则表明该帧在传输过程中没出错，否则出现了差错。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>发送端要发送的 m 位二进制数据为 10110011, 一共8位.选择的生成多项式为 G(x) = X4 + X3 + 1, 将G(x) 转成二进制位:11001, 一共5位,那么将 4 位 0000 附加到 m位二进制数据 后为: 101100110000, 现在 被除数是 101100110000, 除数是 11001, 得到的余数为 0100, 最后将 m 位二进制数据 加上 余数 0100 得到 101100110100  发送给接收端.</p><p><img src="http://7xt8a6.com1.z0.glb.clouddn.com/crc-2.jpg" alt="crc-2"></p><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><ul><li>信息字段代码为: 1011001, 对应 m(x)=x6+x4+x3+1(第6,4,3,0位为1,其他位为0)；</li><li>假设生成多项式为：g(x)=x4+x3+1；则对应g(x)的代码为: 11001(第4,3,0位为1,其他位均为0)</li><li>将信息字段后追加 4个零得到 10110010000(生成多项式一共5位所以要加4个零)</li><li>将 10110010000 除以 11001 得到余数 1010,也就是说 CRC校验码为 1010</li><li>最后的发送数据: 10110011010 (也就是原始数据加上CRC校验码)</li></ul><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><ul><li>已知信息位为 1100，</li><li>生成多项式G(x) = x3+x+1, 对应的二进制位为 1011</li><li>信息位加上3个零为 1100000</li><li>1100000 除以 1011 得到的 CRC校验码为 010</li><li>最后发送的信息为 1100010</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://winda.blog.51cto.com/55153/1063951" target="_blank" rel="noopener">最通俗的CRC校验原理剖析</a></li></ul>]]></content>
    
    <summary type="html">
    
      对循环冗余校验码CRC的理解,演示CRC校验码的详细计算过程
    
    </summary>
    
      <category term="计算机网络" scheme="http://ckjava.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://ckjava.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Phabricator 的 conduit API 使用说明</title>
    <link href="http://ckjava.com/2017/08/15/Phabricator-conduit-API-Java/"/>
    <id>http://ckjava.com/2017/08/15/Phabricator-conduit-API-Java/</id>
    <published>2017-08-14T16:00:00.000Z</published>
    <updated>2018-01-01T12:55:41.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Phabricator 的 conduit API 地址在 <code>http://test.pha.com/conduit/</code>, 在使用 API 前需要生成一个访问用的 Token,地址在 <code>http://test.pha.com/settings/user/chen_k/page/apitokens/</code> 其中 <code>chen_k</code> 是自己的用户名.</p><p>这里举一个查询任务的API，地址在<code>http://test.pha.com/conduit/method/maniphest.search/</code>.</p><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><p><img src="http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param.PNG" alt="pha-api-param"></p><ul><li>queryKey 表示 Phabricator 内置的查询对象，具体有 “assigned”, “authored”, “subscribed”, “open”, “all”, 当然也可以自定义查询后在这里使用</li><li>constraints ： 查询条件，<code>{&quot;statuses&quot;: [&quot;open&quot;]}</code> 表示任务状态为 open 的</li><li>attachments 任务对象关联其他对象查询， <code>{ &quot;subscribers&quot;: true}</code> 表示查询任务的订阅者</li><li>order 排序，内置的有 “priority”,”updated”,”outdated”,”newest”,”oldest”,”title”, “priority” 表示 <code>order by priority, subpriority, id</code></li><li>before 表示分页中的 上一页</li><li>after 表示分页中的 下一页</li><li>limit 表示分页中的 每页记录数</li></ul><h2 id="使用-Java-访问-API"><a href="#使用-Java-访问-API" class="headerlink" title="使用 Java 访问 API"></a>使用 Java 访问 API</h2><p>点击 <code>Call Method</code> 后，生成的 cURL 查询格式如下</p><p><img src="http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-2.PNG" alt="pha-api-param-2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://test.pha.com/api/maniphest.search \</span><br><span class="line">    -d api.token=api-token \</span><br><span class="line">    -d queryKey=all \</span><br><span class="line">    -d constraints[statuses][0]=open \</span><br><span class="line">    -d attachments[subscribers]=1 \</span><br><span class="line">    -d order[0]=id</span><br></pre></td></tr></table></figure><p>在 Java 中查询方式如下, 主要就是根据生成的 cURL 参数来构造查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPhabricatorAPI</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Response res = Request.Post(<span class="string">"http://test.pha.com/api/maniphest.search"</span>)</span><br><span class="line">.bodyForm(Form.form()</span><br><span class="line">.add(<span class="string">"api.token"</span>, <span class="string">"api-6mlsh56cb5uexqbxgpnvah6djhmc"</span>)</span><br><span class="line">.add(<span class="string">"queryKey"</span>, <span class="string">"all"</span>)</span><br><span class="line">.add(<span class="string">"constraints[statuses][0]"</span>, <span class="string">"open"</span>)</span><br><span class="line">.add(<span class="string">"attachments[subscribers]"</span>, <span class="string">"1"</span>)</span><br><span class="line">.add(<span class="string">"order[0]"</span>, <span class="string">"id"</span>)</span><br><span class="line">.build())</span><br><span class="line">.execute();</span><br><span class="line">Content content = res.returnContent();</span><br><span class="line">System.out.println(content.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的 Maven 依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fluent-hc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-before，after-和-limit-进行翻页查询"><a href="#使用-before，after-和-limit-进行翻页查询" class="headerlink" title="使用 before，after 和 limit 进行翻页查询"></a>使用 before，after 和 limit 进行翻页查询</h2><p><img src="http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-1.PNG" alt="pha-api-param-1"></p><p>这里举个例子，当 before，after 和 limit 三个参数为空的时候<br>返回的任务 id 分别是：28，27，26，22，21，19，17，16，14，13，12，11，10，9，7，5，1</p><ul><li>当 before=21,after为空,limit=5, 返回 28，27，26，22，相当于上一页</li><li>当 before为空，after=22, limit=5, 返回 21, 19，17，16，14，相当于下一页</li><li>当 before为空，after=14, limit=5, 返回 13，12，11，10，9，相当于下一页</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了 Phabricator 的 conduit API 的使用，关键点在于通过 Phabricator 生成的 cURL 参数来构造 Java 查询。</p>]]></content>
    
    <summary type="html">
    
      Phabricator 的 conduit API 使用说明
    
    </summary>
    
      <category term="Phabricator" scheme="http://ckjava.com/categories/Phabricator/"/>
    
      <category term="PHP" scheme="http://ckjava.com/categories/Phabricator/PHP/"/>
    
    
      <category term="Phabricator" scheme="http://ckjava.com/tags/Phabricator/"/>
    
  </entry>
  
</feed>
